// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace location2.trackSvc {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BasicHttpBinding_IService1", Namespace="http://tempuri.org/")]
    public partial class Service1 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback updateMomgoDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback syncSuunto60OperationCompleted;
        
        private System.Threading.SendOrPostCallback installgOperationCompleted;
        
        private System.Threading.SendOrPostCallback convertUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback convertEventsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMobTotalsGraphOperationCompleted;
        
        private System.Threading.SendOrPostCallback addPracticeOperationCompleted;
        
        private System.Threading.SendOrPostCallback setEventInCalendarOperationCompleted;
        
        private System.Threading.SendOrPostCallback restPaswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEventTotalsMobOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPracticeTotalsOperationCompleted;
        
        private System.Threading.SendOrPostCallback resetEventTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateMarkerOperationCompleted;
        
        private System.Threading.SendOrPostCallback testPmcOperationCompleted;
        
        private System.Threading.SendOrPostCallback getTrackPointsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCoachWeekTotalsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllMarkersByPracticeOperationCompleted;
        
        private System.Threading.SendOrPostCallback athGeneralListOperationCompleted;
        
        private System.Threading.SendOrPostCallback insertMultiToGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEventReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateMomgoDataFromFoxiOperationCompleted;
        
        private System.Threading.SendOrPostCallback athGaugesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFutureEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateMomgoCalendarOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateGarminDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback getGraphDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback athCurrDataMongoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAthNameByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataUsingDataContractOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteMarkerOperationCompleted;
        
        private System.Threading.SendOrPostCallback addMarkerOperationCompleted;
        
        private System.Threading.SendOrPostCallback validateNickNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllMarkersByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback createEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEventIdByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEventIdByNameForMarkersOperationCompleted;
        
        private System.Threading.SendOrPostCallback getcurrentEventByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEventNameByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getErrprFromMobileOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEventMobOperationCompleted;
        
        private System.Threading.SendOrPostCallback updatePracticeOperationCompleted;
        
        private System.Threading.SendOrPostCallback insertNewProgramOperationCompleted;
        
        private System.Threading.SendOrPostCallback populateProgramOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateProgramsJsonOperationCompleted;
        
        private System.Threading.SendOrPostCallback athCurrDataByDeviceIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getGaugeOperationCompleted;
        
        private System.Threading.SendOrPostCallback getGaugeMobOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkProgramNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback getProgramOperationCompleted;
        
        private System.Threading.SendOrPostCallback saveUserImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteProgramOperationCompleted;
        
        private System.Threading.SendOrPostCallback getListedDeviceIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback attendReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback programsListOperationCompleted;
        
        private System.Threading.SendOrPostCallback eventsListOperationCompleted;
        
        private System.Threading.SendOrPostCallback insertNewDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback validateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback sessionUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback getStartMarkerPositionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEventDateNameIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback groupResultsMongoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPerformanceFordateOperationCompleted;
        
        private System.Threading.SendOrPostCallback getMyTrailForEventMongoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAthDataByDeviceIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserCalendarOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateUserDataJsonOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserCalendarFutureOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserCalendarPastOperationCompleted;
        
        private System.Threading.SendOrPostCallback setCommentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback setCommentsCoachOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUsrObjectOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserPmcOperationCompleted;
        
        private System.Threading.SendOrPostCallback getGaugesForMonthOperationCompleted;
        
        private System.Threading.SendOrPostCallback insertCompUserKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback syncSuuntoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPrcticeListOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUserCalendarTodayOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateSubGroupNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUsrLoginDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback resetCalendarEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEventGraphOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNearestEventMakersOperationCompleted;
        
        private System.Threading.SendOrPostCallback athDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeMultiFromGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCommentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback fieldAthletsAndEvenetsOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateMomgoGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeAthFromGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback removeFromGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback getIyemsForGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback replaceUtilOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPmcOperationCompleted;
        
        private System.Threading.SendOrPostCallback getAllathForGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback getBestResultsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNearestEventOperationCompleted;
        
        private System.Threading.SendOrPostCallback getBestResultsForAthOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateMeberNotesOperationCompleted;
        
        private System.Threading.SendOrPostCallback getNotesMobOperationCompleted;
        
        private System.Threading.SendOrPostCallback getEventInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback addSyncOperationCompleted;
        
        private System.Threading.SendOrPostCallback validatSyncOperationCompleted;
        
        private System.Threading.SendOrPostCallback getUsrGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateAthPersonalDataOperationCompleted;
        
        /// CodeRemarks
        public Service1() {
            this.Url = "http://go-heja.com/Service1.svc";
        }
        
        public Service1(string url) {
            this.Url = url;
        }
        
        /// CodeRemarks
        public event updateMomgoDataCompletedEventHandler updateMomgoDataCompleted;
        
        /// CodeRemarks
        public event syncSuunto60CompletedEventHandler syncSuunto60Completed;
        
        /// CodeRemarks
        public event installgCompletedEventHandler installgCompleted;
        
        /// CodeRemarks
        public event convertUsersCompletedEventHandler convertUsersCompleted;
        
        /// CodeRemarks
        public event convertEventsCompletedEventHandler convertEventsCompleted;
        
        /// CodeRemarks
        public event getCodeCompletedEventHandler getCodeCompleted;
        
        /// CodeRemarks
        public event getMobTotalsGraphCompletedEventHandler getMobTotalsGraphCompleted;
        
        /// CodeRemarks
        public event addPracticeCompletedEventHandler addPracticeCompleted;
        
        /// CodeRemarks
        public event setEventInCalendarCompletedEventHandler setEventInCalendarCompleted;
        
        /// CodeRemarks
        public event restPaswordCompletedEventHandler restPaswordCompleted;
        
        /// CodeRemarks
        public event getEventTotalsMobCompletedEventHandler getEventTotalsMobCompleted;
        
        /// CodeRemarks
        public event getPracticeTotalsCompletedEventHandler getPracticeTotalsCompleted;
        
        /// CodeRemarks
        public event resetEventTimeCompletedEventHandler resetEventTimeCompleted;
        
        /// CodeRemarks
        public event updateMarkerCompletedEventHandler updateMarkerCompleted;
        
        /// CodeRemarks
        public event testPmcCompletedEventHandler testPmcCompleted;
        
        /// CodeRemarks
        public event getTrackPointsCompletedEventHandler getTrackPointsCompleted;
        
        /// CodeRemarks
        public event getGroupsCompletedEventHandler getGroupsCompleted;
        
        /// CodeRemarks
        public event getCoachWeekTotalsCompletedEventHandler getCoachWeekTotalsCompleted;
        
        /// CodeRemarks
        public event getAllMarkersByPracticeCompletedEventHandler getAllMarkersByPracticeCompleted;
        
        /// CodeRemarks
        public event athGeneralListCompletedEventHandler athGeneralListCompleted;
        
        /// CodeRemarks
        public event insertMultiToGroupCompletedEventHandler insertMultiToGroupCompleted;
        
        /// CodeRemarks
        public event getEventReportCompletedEventHandler getEventReportCompleted;
        
        /// CodeRemarks
        public event updateMomgoDataFromFoxiCompletedEventHandler updateMomgoDataFromFoxiCompleted;
        
        /// CodeRemarks
        public event athGaugesCompletedEventHandler athGaugesCompleted;
        
        /// CodeRemarks
        public event getFutureEventCompletedEventHandler getFutureEventCompleted;
        
        /// CodeRemarks
        public event updateMomgoCalendarCompletedEventHandler updateMomgoCalendarCompleted;
        
        /// CodeRemarks
        public event updateGarminDataCompletedEventHandler updateGarminDataCompleted;
        
        /// CodeRemarks
        public event getGraphDataCompletedEventHandler getGraphDataCompleted;
        
        /// CodeRemarks
        public event athCurrDataMongoCompletedEventHandler athCurrDataMongoCompleted;
        
        /// CodeRemarks
        public event getAthNameByIdCompletedEventHandler getAthNameByIdCompleted;
        
        /// CodeRemarks
        public event GetDataUsingDataContractCompletedEventHandler GetDataUsingDataContractCompleted;
        
        /// CodeRemarks
        public event deleteMarkerCompletedEventHandler deleteMarkerCompleted;
        
        /// CodeRemarks
        public event addMarkerCompletedEventHandler addMarkerCompleted;
        
        /// CodeRemarks
        public event validateNickNameCompletedEventHandler validateNickNameCompleted;
        
        /// CodeRemarks
        public event getAllMarkersByIdCompletedEventHandler getAllMarkersByIdCompleted;
        
        /// CodeRemarks
        public event createEventCompletedEventHandler createEventCompleted;
        
        /// CodeRemarks
        public event updateEventCompletedEventHandler updateEventCompleted;
        
        /// CodeRemarks
        public event deleteEventCompletedEventHandler deleteEventCompleted;
        
        /// CodeRemarks
        public event getEventIdByNameCompletedEventHandler getEventIdByNameCompleted;
        
        /// CodeRemarks
        public event getEventIdByNameForMarkersCompletedEventHandler getEventIdByNameForMarkersCompleted;
        
        /// CodeRemarks
        public event getcurrentEventByDateCompletedEventHandler getcurrentEventByDateCompleted;
        
        /// CodeRemarks
        public event getEventNameByIdCompletedEventHandler getEventNameByIdCompleted;
        
        /// CodeRemarks
        public event getErrprFromMobileCompletedEventHandler getErrprFromMobileCompleted;
        
        /// CodeRemarks
        public event getEventMobCompletedEventHandler getEventMobCompleted;
        
        /// CodeRemarks
        public event updatePracticeCompletedEventHandler updatePracticeCompleted;
        
        /// CodeRemarks
        public event insertNewProgramCompletedEventHandler insertNewProgramCompleted;
        
        /// CodeRemarks
        public event populateProgramCompletedEventHandler populateProgramCompleted;
        
        /// CodeRemarks
        public event updateProgramsJsonCompletedEventHandler updateProgramsJsonCompleted;
        
        /// CodeRemarks
        public event athCurrDataByDeviceIdCompletedEventHandler athCurrDataByDeviceIdCompleted;
        
        /// CodeRemarks
        public event getGaugeCompletedEventHandler getGaugeCompleted;
        
        /// CodeRemarks
        public event getGaugeMobCompletedEventHandler getGaugeMobCompleted;
        
        /// CodeRemarks
        public event checkProgramNameCompletedEventHandler checkProgramNameCompleted;
        
        /// CodeRemarks
        public event getProgramCompletedEventHandler getProgramCompleted;
        
        /// CodeRemarks
        public event saveUserImageCompletedEventHandler saveUserImageCompleted;
        
        /// CodeRemarks
        public event deleteProgramCompletedEventHandler deleteProgramCompleted;
        
        /// CodeRemarks
        public event getListedDeviceIdCompletedEventHandler getListedDeviceIdCompleted;
        
        /// CodeRemarks
        public event attendReportCompletedEventHandler attendReportCompleted;
        
        /// CodeRemarks
        public event programsListCompletedEventHandler programsListCompleted;
        
        /// CodeRemarks
        public event eventsListCompletedEventHandler eventsListCompleted;
        
        /// CodeRemarks
        public event insertNewDeviceCompletedEventHandler insertNewDeviceCompleted;
        
        /// CodeRemarks
        public event validateUserCompletedEventHandler validateUserCompleted;
        
        /// CodeRemarks
        public event sessionUserCompletedEventHandler sessionUserCompleted;
        
        /// CodeRemarks
        public event getStartMarkerPositionCompletedEventHandler getStartMarkerPositionCompleted;
        
        /// CodeRemarks
        public event getEventDateNameIdCompletedEventHandler getEventDateNameIdCompleted;
        
        /// CodeRemarks
        public event groupResultsMongoCompletedEventHandler groupResultsMongoCompleted;
        
        /// CodeRemarks
        public event getPerformanceFordateCompletedEventHandler getPerformanceFordateCompleted;
        
        /// CodeRemarks
        public event getMyTrailForEventMongoCompletedEventHandler getMyTrailForEventMongoCompleted;
        
        /// CodeRemarks
        public event getAthDataByDeviceIdCompletedEventHandler getAthDataByDeviceIdCompleted;
        
        /// CodeRemarks
        public event getUserCalendarCompletedEventHandler getUserCalendarCompleted;
        
        /// CodeRemarks
        public event updateUserDataJsonCompletedEventHandler updateUserDataJsonCompleted;
        
        /// CodeRemarks
        public event getUserCalendarFutureCompletedEventHandler getUserCalendarFutureCompleted;
        
        /// CodeRemarks
        public event getUserCalendarPastCompletedEventHandler getUserCalendarPastCompleted;
        
        /// CodeRemarks
        public event setCommentsCompletedEventHandler setCommentsCompleted;
        
        /// CodeRemarks
        public event setCommentsCoachCompletedEventHandler setCommentsCoachCompleted;
        
        /// CodeRemarks
        public event getUsrObjectCompletedEventHandler getUsrObjectCompleted;
        
        /// CodeRemarks
        public event getUserPmcCompletedEventHandler getUserPmcCompleted;
        
        /// CodeRemarks
        public event getGaugesForMonthCompletedEventHandler getGaugesForMonthCompleted;
        
        /// CodeRemarks
        public event insertCompUserKeyCompletedEventHandler insertCompUserKeyCompleted;
        
        /// CodeRemarks
        public event syncSuuntoCompletedEventHandler syncSuuntoCompleted;
        
        /// CodeRemarks
        public event getPrcticeListCompletedEventHandler getPrcticeListCompleted;
        
        /// CodeRemarks
        public event getUserCalendarTodayCompletedEventHandler getUserCalendarTodayCompleted;
        
        /// CodeRemarks
        public event updateSubGroupNameCompletedEventHandler updateSubGroupNameCompleted;
        
        /// CodeRemarks
        public event getUsrLoginDataCompletedEventHandler getUsrLoginDataCompleted;
        
        /// CodeRemarks
        public event resetCalendarEventCompletedEventHandler resetCalendarEventCompleted;
        
        /// CodeRemarks
        public event getEventGraphCompletedEventHandler getEventGraphCompleted;
        
        /// CodeRemarks
        public event getNearestEventMakersCompletedEventHandler getNearestEventMakersCompleted;
        
        /// CodeRemarks
        public event athDataCompletedEventHandler athDataCompleted;
        
        /// CodeRemarks
        public event removeMultiFromGroupCompletedEventHandler removeMultiFromGroupCompleted;
        
        /// CodeRemarks
        public event getCommentsCompletedEventHandler getCommentsCompleted;
        
        /// CodeRemarks
        public event fieldAthletsAndEvenetsCompletedEventHandler fieldAthletsAndEvenetsCompleted;
        
        /// CodeRemarks
        public event updateMomgoGroupsCompletedEventHandler updateMomgoGroupsCompleted;
        
        /// CodeRemarks
        public event removeAthFromGroupCompletedEventHandler removeAthFromGroupCompleted;
        
        /// CodeRemarks
        public event removeFromGroupCompletedEventHandler removeFromGroupCompleted;
        
        /// CodeRemarks
        public event getIyemsForGroupCompletedEventHandler getIyemsForGroupCompleted;
        
        /// CodeRemarks
        public event replaceUtilCompletedEventHandler replaceUtilCompleted;
        
        /// CodeRemarks
        public event getPmcCompletedEventHandler getPmcCompleted;
        
        /// CodeRemarks
        public event getAllathForGroupCompletedEventHandler getAllathForGroupCompleted;
        
        /// CodeRemarks
        public event getBestResultsCompletedEventHandler getBestResultsCompleted;
        
        /// CodeRemarks
        public event getNearestEventCompletedEventHandler getNearestEventCompleted;
        
        /// CodeRemarks
        public event getBestResultsForAthCompletedEventHandler getBestResultsForAthCompleted;
        
        /// CodeRemarks
        public event updateMeberNotesCompletedEventHandler updateMeberNotesCompleted;
        
        /// CodeRemarks
        public event getNotesMobCompletedEventHandler getNotesMobCompleted;
        
        /// CodeRemarks
        public event getEventInfoCompletedEventHandler getEventInfoCompleted;
        
        /// CodeRemarks
        public event addSyncCompletedEventHandler addSyncCompleted;
        
        /// CodeRemarks
        public event validatSyncCompletedEventHandler validatSyncCompleted;
        
        /// CodeRemarks
        public event getUsrGroupCompletedEventHandler getUsrGroupCompleted;
        
        /// CodeRemarks
        public event updateAthPersonalDataCompletedEventHandler updateAthPersonalDataCompleted;
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/updateMomgoData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void updateMomgoData(
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string name, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string loc, 
                    System.DateTime time, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool timeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string deviceID, 
                    float speed, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool speedSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string id, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string country, 
                    float dist, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool distSpecified, 
                    float alt, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool altSpecified, 
                    float bearing, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool bearingSpecified, 
                    int recordType, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool recordTypeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventType, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            this.Invoke("updateMomgoData", new object[] {
                        name,
                        loc,
                        time,
                        timeSpecified,
                        deviceID,
                        speed,
                        speedSpecified,
                        id,
                        country,
                        dist,
                        distSpecified,
                        alt,
                        altSpecified,
                        bearing,
                        bearingSpecified,
                        recordType,
                        recordTypeSpecified,
                        eventType,
                        specGroup});
        }
        
        /// CodeRemarks
        public void updateMomgoDataAsync(
                    string name, 
                    string loc, 
                    System.DateTime time, 
                    bool timeSpecified, 
                    string deviceID, 
                    float speed, 
                    bool speedSpecified, 
                    string id, 
                    string country, 
                    float dist, 
                    bool distSpecified, 
                    float alt, 
                    bool altSpecified, 
                    float bearing, 
                    bool bearingSpecified, 
                    int recordType, 
                    bool recordTypeSpecified, 
                    string eventType, 
                    string specGroup) {
            this.updateMomgoDataAsync(name, loc, time, timeSpecified, deviceID, speed, speedSpecified, id, country, dist, distSpecified, alt, altSpecified, bearing, bearingSpecified, recordType, recordTypeSpecified, eventType, specGroup, null);
        }
        
        /// CodeRemarks
        public void updateMomgoDataAsync(
                    string name, 
                    string loc, 
                    System.DateTime time, 
                    bool timeSpecified, 
                    string deviceID, 
                    float speed, 
                    bool speedSpecified, 
                    string id, 
                    string country, 
                    float dist, 
                    bool distSpecified, 
                    float alt, 
                    bool altSpecified, 
                    float bearing, 
                    bool bearingSpecified, 
                    int recordType, 
                    bool recordTypeSpecified, 
                    string eventType, 
                    string specGroup, 
                    object userState) {
            if ((this.updateMomgoDataOperationCompleted == null)) {
                this.updateMomgoDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateMomgoDataOperationCompleted);
            }
            this.InvokeAsync("updateMomgoData", new object[] {
                        name,
                        loc,
                        time,
                        timeSpecified,
                        deviceID,
                        speed,
                        speedSpecified,
                        id,
                        country,
                        dist,
                        distSpecified,
                        alt,
                        altSpecified,
                        bearing,
                        bearingSpecified,
                        recordType,
                        recordTypeSpecified,
                        eventType,
                        specGroup}, this.updateMomgoDataOperationCompleted, userState);
        }
        
        private void OnupdateMomgoDataOperationCompleted(object arg) {
            if ((this.updateMomgoDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateMomgoDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/syncSuunto60", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void syncSuunto60([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup, out bool syncSuunto60Result, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool syncSuunto60ResultSpecified) {
            object[] results = this.Invoke("syncSuunto60", new object[] {
                        userid,
                        specGroup});
            syncSuunto60Result = ((bool)(results[0]));
            syncSuunto60ResultSpecified = ((bool)(results[1]));
        }
        
        /// CodeRemarks
        public void syncSuunto60Async(string userid, string specGroup) {
            this.syncSuunto60Async(userid, specGroup, null);
        }
        
        /// CodeRemarks
        public void syncSuunto60Async(string userid, string specGroup, object userState) {
            if ((this.syncSuunto60OperationCompleted == null)) {
                this.syncSuunto60OperationCompleted = new System.Threading.SendOrPostCallback(this.OnsyncSuunto60OperationCompleted);
            }
            this.InvokeAsync("syncSuunto60", new object[] {
                        userid,
                        specGroup}, this.syncSuunto60OperationCompleted, userState);
        }
        
        private void OnsyncSuunto60OperationCompleted(object arg) {
            if ((this.syncSuunto60Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.syncSuunto60Completed(this, new syncSuunto60CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/installg", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object installg([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("installg", new object[] {
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void installgAsync(string specGroup) {
            this.installgAsync(specGroup, null);
        }
        
        /// CodeRemarks
        public void installgAsync(string specGroup, object userState) {
            if ((this.installgOperationCompleted == null)) {
                this.installgOperationCompleted = new System.Threading.SendOrPostCallback(this.OninstallgOperationCompleted);
            }
            this.InvokeAsync("installg", new object[] {
                        specGroup}, this.installgOperationCompleted, userState);
        }
        
        private void OninstallgOperationCompleted(object arg) {
            if ((this.installgCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.installgCompleted(this, new installgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/convertUsers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object convertUsers([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("convertUsers", new object[] {
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void convertUsersAsync(string specGroup) {
            this.convertUsersAsync(specGroup, null);
        }
        
        /// CodeRemarks
        public void convertUsersAsync(string specGroup, object userState) {
            if ((this.convertUsersOperationCompleted == null)) {
                this.convertUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconvertUsersOperationCompleted);
            }
            this.InvokeAsync("convertUsers", new object[] {
                        specGroup}, this.convertUsersOperationCompleted, userState);
        }
        
        private void OnconvertUsersOperationCompleted(object arg) {
            if ((this.convertUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.convertUsersCompleted(this, new convertUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/convertEvents", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object convertEvents([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string athId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("convertEvents", new object[] {
                        athId,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void convertEventsAsync(string athId, string specGroup) {
            this.convertEventsAsync(athId, specGroup, null);
        }
        
        /// CodeRemarks
        public void convertEventsAsync(string athId, string specGroup, object userState) {
            if ((this.convertEventsOperationCompleted == null)) {
                this.convertEventsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnconvertEventsOperationCompleted);
            }
            this.InvokeAsync("convertEvents", new object[] {
                        athId,
                        specGroup}, this.convertEventsOperationCompleted, userState);
        }
        
        private void OnconvertEventsOperationCompleted(object arg) {
            if ((this.convertEventsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.convertEventsCompleted(this, new convertEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string getCode([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string usr, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getCode", new object[] {
                        usr,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void getCodeAsync(string usr, string specGroup) {
            this.getCodeAsync(usr, specGroup, null);
        }
        
        /// CodeRemarks
        public void getCodeAsync(string usr, string specGroup, object userState) {
            if ((this.getCodeOperationCompleted == null)) {
                this.getCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCodeOperationCompleted);
            }
            this.InvokeAsync("getCode", new object[] {
                        usr,
                        specGroup}, this.getCodeOperationCompleted, userState);
        }
        
        private void OngetCodeOperationCompleted(object arg) {
            if ((this.getCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCodeCompleted(this, new getCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getMobTotalsGraph", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string getMobTotalsGraph([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string athId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getMobTotalsGraph", new object[] {
                        athId,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void getMobTotalsGraphAsync(string athId, string specGroup) {
            this.getMobTotalsGraphAsync(athId, specGroup, null);
        }
        
        /// CodeRemarks
        public void getMobTotalsGraphAsync(string athId, string specGroup, object userState) {
            if ((this.getMobTotalsGraphOperationCompleted == null)) {
                this.getMobTotalsGraphOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMobTotalsGraphOperationCompleted);
            }
            this.InvokeAsync("getMobTotalsGraph", new object[] {
                        athId,
                        specGroup}, this.getMobTotalsGraphOperationCompleted, userState);
        }
        
        private void OngetMobTotalsGraphOperationCompleted(object arg) {
            if ((this.getMobTotalsGraphCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMobTotalsGraphCompleted(this, new getMobTotalsGraphCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/addPractice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string addPractice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string name, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string generaldata, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string dist, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string durHrs, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string durMin, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string tss, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string hb, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pace, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string token, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string markersJson, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("addPractice", new object[] {
                        name,
                        eventType,
                        generaldata,
                        dist,
                        durHrs,
                        durMin,
                        tss,
                        hb,
                        pace,
                        token,
                        markersJson,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void addPracticeAsync(string name, string eventType, string generaldata, string dist, string durHrs, string durMin, string tss, string hb, string pace, string token, string markersJson, string specGroup) {
            this.addPracticeAsync(name, eventType, generaldata, dist, durHrs, durMin, tss, hb, pace, token, markersJson, specGroup, null);
        }
        
        /// CodeRemarks
        public void addPracticeAsync(string name, string eventType, string generaldata, string dist, string durHrs, string durMin, string tss, string hb, string pace, string token, string markersJson, string specGroup, object userState) {
            if ((this.addPracticeOperationCompleted == null)) {
                this.addPracticeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddPracticeOperationCompleted);
            }
            this.InvokeAsync("addPractice", new object[] {
                        name,
                        eventType,
                        generaldata,
                        dist,
                        durHrs,
                        durMin,
                        tss,
                        hb,
                        pace,
                        token,
                        markersJson,
                        specGroup}, this.addPracticeOperationCompleted, userState);
        }
        
        private void OnaddPracticeOperationCompleted(object arg) {
            if ((this.addPracticeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addPracticeCompleted(this, new addPracticeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/setEventInCalendar", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object setEventInCalendar([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string subGroupId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string startTime, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string practiceId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("setEventInCalendar", new object[] {
                        subGroupId,
                        startTime,
                        userId,
                        practiceId,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void setEventInCalendarAsync(string subGroupId, string startTime, string userId, string practiceId, string specGroup) {
            this.setEventInCalendarAsync(subGroupId, startTime, userId, practiceId, specGroup, null);
        }
        
        /// CodeRemarks
        public void setEventInCalendarAsync(string subGroupId, string startTime, string userId, string practiceId, string specGroup, object userState) {
            if ((this.setEventInCalendarOperationCompleted == null)) {
                this.setEventInCalendarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetEventInCalendarOperationCompleted);
            }
            this.InvokeAsync("setEventInCalendar", new object[] {
                        subGroupId,
                        startTime,
                        userId,
                        practiceId,
                        specGroup}, this.setEventInCalendarOperationCompleted, userState);
        }
        
        private void OnsetEventInCalendarOperationCompleted(object arg) {
            if ((this.setEventInCalendarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setEventInCalendarCompleted(this, new setEventInCalendarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/restPasword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void restPasword([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mail, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string psw, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup, out int restPaswordResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool restPaswordResultSpecified) {
            object[] results = this.Invoke("restPasword", new object[] {
                        mail,
                        psw,
                        specGroup});
            restPaswordResult = ((int)(results[0]));
            restPaswordResultSpecified = ((bool)(results[1]));
        }
        
        /// CodeRemarks
        public void restPaswordAsync(string mail, string psw, string specGroup) {
            this.restPaswordAsync(mail, psw, specGroup, null);
        }
        
        /// CodeRemarks
        public void restPaswordAsync(string mail, string psw, string specGroup, object userState) {
            if ((this.restPaswordOperationCompleted == null)) {
                this.restPaswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrestPaswordOperationCompleted);
            }
            this.InvokeAsync("restPasword", new object[] {
                        mail,
                        psw,
                        specGroup}, this.restPaswordOperationCompleted, userState);
        }
        
        private void OnrestPaswordOperationCompleted(object arg) {
            if ((this.restPaswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.restPaswordCompleted(this, new restPaswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getEventTotalsMob", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object getEventTotalsMob([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getEventTotalsMob", new object[] {
                        eventId,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void getEventTotalsMobAsync(string eventId, string specGroup) {
            this.getEventTotalsMobAsync(eventId, specGroup, null);
        }
        
        /// CodeRemarks
        public void getEventTotalsMobAsync(string eventId, string specGroup, object userState) {
            if ((this.getEventTotalsMobOperationCompleted == null)) {
                this.getEventTotalsMobOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEventTotalsMobOperationCompleted);
            }
            this.InvokeAsync("getEventTotalsMob", new object[] {
                        eventId,
                        specGroup}, this.getEventTotalsMobOperationCompleted, userState);
        }
        
        private void OngetEventTotalsMobOperationCompleted(object arg) {
            if ((this.getEventTotalsMobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEventTotalsMobCompleted(this, new getEventTotalsMobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getPracticeTotals", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object getPracticeTotals([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string athId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventDateTime, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getPracticeTotals", new object[] {
                        athId,
                        eventDateTime,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void getPracticeTotalsAsync(string athId, string eventDateTime, string specGroup) {
            this.getPracticeTotalsAsync(athId, eventDateTime, specGroup, null);
        }
        
        /// CodeRemarks
        public void getPracticeTotalsAsync(string athId, string eventDateTime, string specGroup, object userState) {
            if ((this.getPracticeTotalsOperationCompleted == null)) {
                this.getPracticeTotalsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPracticeTotalsOperationCompleted);
            }
            this.InvokeAsync("getPracticeTotals", new object[] {
                        athId,
                        eventDateTime,
                        specGroup}, this.getPracticeTotalsOperationCompleted, userState);
        }
        
        private void OngetPracticeTotalsOperationCompleted(object arg) {
            if ((this.getPracticeTotalsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPracticeTotalsCompleted(this, new getPracticeTotalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/resetEventTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void resetEventTime([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string startDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string endDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string opType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string isGroup, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup, out bool resetEventTimeResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool resetEventTimeResultSpecified) {
            object[] results = this.Invoke("resetEventTime", new object[] {
                        startDate,
                        endDate,
                        eventId,
                        userId,
                        opType,
                        isGroup,
                        specGroup});
            resetEventTimeResult = ((bool)(results[0]));
            resetEventTimeResultSpecified = ((bool)(results[1]));
        }
        
        /// CodeRemarks
        public void resetEventTimeAsync(string startDate, string endDate, string eventId, string userId, string opType, string isGroup, string specGroup) {
            this.resetEventTimeAsync(startDate, endDate, eventId, userId, opType, isGroup, specGroup, null);
        }
        
        /// CodeRemarks
        public void resetEventTimeAsync(string startDate, string endDate, string eventId, string userId, string opType, string isGroup, string specGroup, object userState) {
            if ((this.resetEventTimeOperationCompleted == null)) {
                this.resetEventTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnresetEventTimeOperationCompleted);
            }
            this.InvokeAsync("resetEventTime", new object[] {
                        startDate,
                        endDate,
                        eventId,
                        userId,
                        opType,
                        isGroup,
                        specGroup}, this.resetEventTimeOperationCompleted, userState);
        }
        
        private void OnresetEventTimeOperationCompleted(object arg) {
            if ((this.resetEventTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.resetEventTimeCompleted(this, new resetEventTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/updateMarker", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object updateMarker([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string markerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string name, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string description, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mLat, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mLng, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string type, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string interval, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("updateMarker", new object[] {
                        markerId,
                        name,
                        description,
                        mLat,
                        mLng,
                        type,
                        eventid,
                        interval,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void updateMarkerAsync(string markerId, string name, string description, string mLat, string mLng, string type, string eventid, string interval, string specGroup) {
            this.updateMarkerAsync(markerId, name, description, mLat, mLng, type, eventid, interval, specGroup, null);
        }
        
        /// CodeRemarks
        public void updateMarkerAsync(string markerId, string name, string description, string mLat, string mLng, string type, string eventid, string interval, string specGroup, object userState) {
            if ((this.updateMarkerOperationCompleted == null)) {
                this.updateMarkerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateMarkerOperationCompleted);
            }
            this.InvokeAsync("updateMarker", new object[] {
                        markerId,
                        name,
                        description,
                        mLat,
                        mLng,
                        type,
                        eventid,
                        interval,
                        specGroup}, this.updateMarkerOperationCompleted, userState);
        }
        
        private void OnupdateMarkerOperationCompleted(object arg) {
            if ((this.updateMarkerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateMarkerCompleted(this, new updateMarkerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/testPmc", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void testPmc(int d, [System.Xml.Serialization.XmlIgnoreAttribute()] bool dSpecified, float pmc, [System.Xml.Serialization.XmlIgnoreAttribute()] bool pmcSpecified, bool type, [System.Xml.Serialization.XmlIgnoreAttribute()] bool typeSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string id, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup, out bool testPmcResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool testPmcResultSpecified) {
            object[] results = this.Invoke("testPmc", new object[] {
                        d,
                        dSpecified,
                        pmc,
                        pmcSpecified,
                        type,
                        typeSpecified,
                        id,
                        specGroup});
            testPmcResult = ((bool)(results[0]));
            testPmcResultSpecified = ((bool)(results[1]));
        }
        
        /// CodeRemarks
        public void testPmcAsync(int d, bool dSpecified, float pmc, bool pmcSpecified, bool type, bool typeSpecified, string id, string specGroup) {
            this.testPmcAsync(d, dSpecified, pmc, pmcSpecified, type, typeSpecified, id, specGroup, null);
        }
        
        /// CodeRemarks
        public void testPmcAsync(int d, bool dSpecified, float pmc, bool pmcSpecified, bool type, bool typeSpecified, string id, string specGroup, object userState) {
            if ((this.testPmcOperationCompleted == null)) {
                this.testPmcOperationCompleted = new System.Threading.SendOrPostCallback(this.OntestPmcOperationCompleted);
            }
            this.InvokeAsync("testPmc", new object[] {
                        d,
                        dSpecified,
                        pmc,
                        pmcSpecified,
                        type,
                        typeSpecified,
                        id,
                        specGroup}, this.testPmcOperationCompleted, userState);
        }
        
        private void OntestPmcOperationCompleted(object arg) {
            if ((this.testPmcCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.testPmcCompleted(this, new testPmcCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getTrackPoints", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object getTrackPoints([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getTrackPoints", new object[] {
                        eventId,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void getTrackPointsAsync(string eventId, string specGroup) {
            this.getTrackPointsAsync(eventId, specGroup, null);
        }
        
        /// CodeRemarks
        public void getTrackPointsAsync(string eventId, string specGroup, object userState) {
            if ((this.getTrackPointsOperationCompleted == null)) {
                this.getTrackPointsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetTrackPointsOperationCompleted);
            }
            this.InvokeAsync("getTrackPoints", new object[] {
                        eventId,
                        specGroup}, this.getTrackPointsOperationCompleted, userState);
        }
        
        private void OngetTrackPointsOperationCompleted(object arg) {
            if ((this.getTrackPointsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getTrackPointsCompleted(this, new getTrackPointsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getGroups", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object getGroups([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string token, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getGroups", new object[] {
                        token,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void getGroupsAsync(string token, string specGroup) {
            this.getGroupsAsync(token, specGroup, null);
        }
        
        /// CodeRemarks
        public void getGroupsAsync(string token, string specGroup, object userState) {
            if ((this.getGroupsOperationCompleted == null)) {
                this.getGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetGroupsOperationCompleted);
            }
            this.InvokeAsync("getGroups", new object[] {
                        token,
                        specGroup}, this.getGroupsOperationCompleted, userState);
        }
        
        private void OngetGroupsOperationCompleted(object arg) {
            if ((this.getGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getGroupsCompleted(this, new getGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getCoachWeekTotals", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string getCoachWeekTotals([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string athId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getCoachWeekTotals", new object[] {
                        athId,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void getCoachWeekTotalsAsync(string athId, string specGroup) {
            this.getCoachWeekTotalsAsync(athId, specGroup, null);
        }
        
        /// CodeRemarks
        public void getCoachWeekTotalsAsync(string athId, string specGroup, object userState) {
            if ((this.getCoachWeekTotalsOperationCompleted == null)) {
                this.getCoachWeekTotalsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCoachWeekTotalsOperationCompleted);
            }
            this.InvokeAsync("getCoachWeekTotals", new object[] {
                        athId,
                        specGroup}, this.getCoachWeekTotalsOperationCompleted, userState);
        }
        
        private void OngetCoachWeekTotalsOperationCompleted(object arg) {
            if ((this.getCoachWeekTotalsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCoachWeekTotalsCompleted(this, new getCoachWeekTotalsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getAllMarkersByPractice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object getAllMarkersByPractice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Id, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getAllMarkersByPractice", new object[] {
                        Id,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void getAllMarkersByPracticeAsync(string Id, string specGroup) {
            this.getAllMarkersByPracticeAsync(Id, specGroup, null);
        }
        
        /// CodeRemarks
        public void getAllMarkersByPracticeAsync(string Id, string specGroup, object userState) {
            if ((this.getAllMarkersByPracticeOperationCompleted == null)) {
                this.getAllMarkersByPracticeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllMarkersByPracticeOperationCompleted);
            }
            this.InvokeAsync("getAllMarkersByPractice", new object[] {
                        Id,
                        specGroup}, this.getAllMarkersByPracticeOperationCompleted, userState);
        }
        
        private void OngetAllMarkersByPracticeOperationCompleted(object arg) {
            if ((this.getAllMarkersByPracticeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllMarkersByPracticeCompleted(this, new getAllMarkersByPracticeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/athGeneralList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object athGeneralList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string token, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("athGeneralList", new object[] {
                        token,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void athGeneralListAsync(string token, string specGroup) {
            this.athGeneralListAsync(token, specGroup, null);
        }
        
        /// CodeRemarks
        public void athGeneralListAsync(string token, string specGroup, object userState) {
            if ((this.athGeneralListOperationCompleted == null)) {
                this.athGeneralListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnathGeneralListOperationCompleted);
            }
            this.InvokeAsync("athGeneralList", new object[] {
                        token,
                        specGroup}, this.athGeneralListOperationCompleted, userState);
        }
        
        private void OnathGeneralListOperationCompleted(object arg) {
            if ((this.athGeneralListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.athGeneralListCompleted(this, new athGeneralListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/insertMultiToGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void insertMultiToGroup([System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] athList, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string groupId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string groupName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string subGroupId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup, out bool insertMultiToGroupResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool insertMultiToGroupResultSpecified) {
            object[] results = this.Invoke("insertMultiToGroup", new object[] {
                        athList,
                        groupId,
                        groupName,
                        subGroupId,
                        specGroup});
            insertMultiToGroupResult = ((bool)(results[0]));
            insertMultiToGroupResultSpecified = ((bool)(results[1]));
        }
        
        /// CodeRemarks
        public void insertMultiToGroupAsync(string[] athList, string groupId, string groupName, string subGroupId, string specGroup) {
            this.insertMultiToGroupAsync(athList, groupId, groupName, subGroupId, specGroup, null);
        }
        
        /// CodeRemarks
        public void insertMultiToGroupAsync(string[] athList, string groupId, string groupName, string subGroupId, string specGroup, object userState) {
            if ((this.insertMultiToGroupOperationCompleted == null)) {
                this.insertMultiToGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OninsertMultiToGroupOperationCompleted);
            }
            this.InvokeAsync("insertMultiToGroup", new object[] {
                        athList,
                        groupId,
                        groupName,
                        subGroupId,
                        specGroup}, this.insertMultiToGroupOperationCompleted, userState);
        }
        
        private void OninsertMultiToGroupOperationCompleted(object arg) {
            if ((this.insertMultiToGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.insertMultiToGroupCompleted(this, new insertMultiToGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getEventReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object getEventReport([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getEventReport", new object[] {
                        eventId,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void getEventReportAsync(string eventId, string specGroup) {
            this.getEventReportAsync(eventId, specGroup, null);
        }
        
        /// CodeRemarks
        public void getEventReportAsync(string eventId, string specGroup, object userState) {
            if ((this.getEventReportOperationCompleted == null)) {
                this.getEventReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEventReportOperationCompleted);
            }
            this.InvokeAsync("getEventReport", new object[] {
                        eventId,
                        specGroup}, this.getEventReportOperationCompleted, userState);
        }
        
        private void OngetEventReportOperationCompleted(object arg) {
            if ((this.getEventReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEventReportCompleted(this, new getEventReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/updateMomgoDataFromFoxi", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void updateMomgoDataFromFoxi([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string lng, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string lat, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string updateDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string deviceID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string speed, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string recordType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            this.Invoke("updateMomgoDataFromFoxi", new object[] {
                        lng,
                        lat,
                        updateDate,
                        deviceID,
                        speed,
                        recordType,
                        specGroup});
        }
        
        /// CodeRemarks
        public void updateMomgoDataFromFoxiAsync(string lng, string lat, string updateDate, string deviceID, string speed, string recordType, string specGroup) {
            this.updateMomgoDataFromFoxiAsync(lng, lat, updateDate, deviceID, speed, recordType, specGroup, null);
        }
        
        /// CodeRemarks
        public void updateMomgoDataFromFoxiAsync(string lng, string lat, string updateDate, string deviceID, string speed, string recordType, string specGroup, object userState) {
            if ((this.updateMomgoDataFromFoxiOperationCompleted == null)) {
                this.updateMomgoDataFromFoxiOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateMomgoDataFromFoxiOperationCompleted);
            }
            this.InvokeAsync("updateMomgoDataFromFoxi", new object[] {
                        lng,
                        lat,
                        updateDate,
                        deviceID,
                        speed,
                        recordType,
                        specGroup}, this.updateMomgoDataFromFoxiOperationCompleted, userState);
        }
        
        private void OnupdateMomgoDataFromFoxiOperationCompleted(object arg) {
            if ((this.updateMomgoDataFromFoxiCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateMomgoDataFromFoxiCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/athGauges", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object athGauges([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ownerid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("athGauges", new object[] {
                        ownerid,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void athGaugesAsync(string ownerid, string specGroup) {
            this.athGaugesAsync(ownerid, specGroup, null);
        }
        
        /// CodeRemarks
        public void athGaugesAsync(string ownerid, string specGroup, object userState) {
            if ((this.athGaugesOperationCompleted == null)) {
                this.athGaugesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnathGaugesOperationCompleted);
            }
            this.InvokeAsync("athGauges", new object[] {
                        ownerid,
                        specGroup}, this.athGaugesOperationCompleted, userState);
        }
        
        private void OnathGaugesOperationCompleted(object arg) {
            if ((this.athGaugesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.athGaugesCompleted(this, new athGaugesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getFutureEvent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object getFutureEvent([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string isGroup) {
            object[] results = this.Invoke("getFutureEvent", new object[] {
                        eventId,
                        specGroup,
                        isGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void getFutureEventAsync(string eventId, string specGroup, string isGroup) {
            this.getFutureEventAsync(eventId, specGroup, isGroup, null);
        }
        
        /// CodeRemarks
        public void getFutureEventAsync(string eventId, string specGroup, string isGroup, object userState) {
            if ((this.getFutureEventOperationCompleted == null)) {
                this.getFutureEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFutureEventOperationCompleted);
            }
            this.InvokeAsync("getFutureEvent", new object[] {
                        eventId,
                        specGroup,
                        isGroup}, this.getFutureEventOperationCompleted, userState);
        }
        
        private void OngetFutureEventOperationCompleted(object arg) {
            if ((this.getFutureEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFutureEventCompleted(this, new getFutureEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/updateMomgoCalendar", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string updateMomgoCalendar(
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventName, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string subGroupId, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string startTime, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string endTime, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userId, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventData, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventTotal, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string type, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string programName, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string programStart, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string programEnd, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string tss, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string hb, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string durHrs, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string durMin, 
                    int isAttend, 
                    [System.Xml.Serialization.XmlIgnoreAttribute()] bool isAttendSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("updateMomgoCalendar", new object[] {
                        eventName,
                        subGroupId,
                        startTime,
                        endTime,
                        userId,
                        eventData,
                        eventTotal,
                        type,
                        programName,
                        programStart,
                        programEnd,
                        tss,
                        hb,
                        durHrs,
                        durMin,
                        isAttend,
                        isAttendSpecified,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void updateMomgoCalendarAsync(
                    string eventName, 
                    string subGroupId, 
                    string startTime, 
                    string endTime, 
                    string userId, 
                    string eventData, 
                    string eventTotal, 
                    string type, 
                    string programName, 
                    string programStart, 
                    string programEnd, 
                    string tss, 
                    string hb, 
                    string durHrs, 
                    string durMin, 
                    int isAttend, 
                    bool isAttendSpecified, 
                    string specGroup) {
            this.updateMomgoCalendarAsync(eventName, subGroupId, startTime, endTime, userId, eventData, eventTotal, type, programName, programStart, programEnd, tss, hb, durHrs, durMin, isAttend, isAttendSpecified, specGroup, null);
        }
        
        /// CodeRemarks
        public void updateMomgoCalendarAsync(
                    string eventName, 
                    string subGroupId, 
                    string startTime, 
                    string endTime, 
                    string userId, 
                    string eventData, 
                    string eventTotal, 
                    string type, 
                    string programName, 
                    string programStart, 
                    string programEnd, 
                    string tss, 
                    string hb, 
                    string durHrs, 
                    string durMin, 
                    int isAttend, 
                    bool isAttendSpecified, 
                    string specGroup, 
                    object userState) {
            if ((this.updateMomgoCalendarOperationCompleted == null)) {
                this.updateMomgoCalendarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateMomgoCalendarOperationCompleted);
            }
            this.InvokeAsync("updateMomgoCalendar", new object[] {
                        eventName,
                        subGroupId,
                        startTime,
                        endTime,
                        userId,
                        eventData,
                        eventTotal,
                        type,
                        programName,
                        programStart,
                        programEnd,
                        tss,
                        hb,
                        durHrs,
                        durMin,
                        isAttend,
                        isAttendSpecified,
                        specGroup}, this.updateMomgoCalendarOperationCompleted, userState);
        }
        
        private void OnupdateMomgoCalendarOperationCompleted(object arg) {
            if ((this.updateMomgoCalendarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateMomgoCalendarCompleted(this, new updateMomgoCalendarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/updateGarminData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void updateGarminData([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string uploadid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mongo, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string url, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string sDoc, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup, out bool updateGarminDataResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool updateGarminDataResultSpecified) {
            object[] results = this.Invoke("updateGarminData", new object[] {
                        userId,
                        uploadid,
                        mongo,
                        url,
                        sDoc,
                        specGroup});
            updateGarminDataResult = ((bool)(results[0]));
            updateGarminDataResultSpecified = ((bool)(results[1]));
        }
        
        /// CodeRemarks
        public void updateGarminDataAsync(string userId, string uploadid, string mongo, string url, string sDoc, string specGroup) {
            this.updateGarminDataAsync(userId, uploadid, mongo, url, sDoc, specGroup, null);
        }
        
        /// CodeRemarks
        public void updateGarminDataAsync(string userId, string uploadid, string mongo, string url, string sDoc, string specGroup, object userState) {
            if ((this.updateGarminDataOperationCompleted == null)) {
                this.updateGarminDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateGarminDataOperationCompleted);
            }
            this.InvokeAsync("updateGarminData", new object[] {
                        userId,
                        uploadid,
                        mongo,
                        url,
                        sDoc,
                        specGroup}, this.updateGarminDataOperationCompleted, userState);
        }
        
        private void OnupdateGarminDataOperationCompleted(object arg) {
            if ((this.updateGarminDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateGarminDataCompleted(this, new updateGarminDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getGraphData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object getGraphData([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string athId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventStartDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getGraphData", new object[] {
                        athId,
                        eventId,
                        eventStartDate,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void getGraphDataAsync(string athId, string eventId, string eventStartDate, string specGroup) {
            this.getGraphDataAsync(athId, eventId, eventStartDate, specGroup, null);
        }
        
        /// CodeRemarks
        public void getGraphDataAsync(string athId, string eventId, string eventStartDate, string specGroup, object userState) {
            if ((this.getGraphDataOperationCompleted == null)) {
                this.getGraphDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetGraphDataOperationCompleted);
            }
            this.InvokeAsync("getGraphData", new object[] {
                        athId,
                        eventId,
                        eventStartDate,
                        specGroup}, this.getGraphDataOperationCompleted, userState);
        }
        
        private void OngetGraphDataOperationCompleted(object arg) {
            if ((this.getGraphDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getGraphDataCompleted(this, new getGraphDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/athCurrDataMongo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] athCurrDataMongo([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string athId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("athCurrDataMongo", new object[] {
                        athId,
                        specGroup});
            return ((string[])(results[0]));
        }
        
        /// CodeRemarks
        public void athCurrDataMongoAsync(string athId, string specGroup) {
            this.athCurrDataMongoAsync(athId, specGroup, null);
        }
        
        /// CodeRemarks
        public void athCurrDataMongoAsync(string athId, string specGroup, object userState) {
            if ((this.athCurrDataMongoOperationCompleted == null)) {
                this.athCurrDataMongoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnathCurrDataMongoOperationCompleted);
            }
            this.InvokeAsync("athCurrDataMongo", new object[] {
                        athId,
                        specGroup}, this.athCurrDataMongoOperationCompleted, userState);
        }
        
        private void OnathCurrDataMongoOperationCompleted(object arg) {
            if ((this.athCurrDataMongoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.athCurrDataMongoCompleted(this, new athCurrDataMongoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getAthNameById", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string getAthNameById([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string athId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getAthNameById", new object[] {
                        athId,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void getAthNameByIdAsync(string athId, string specGroup) {
            this.getAthNameByIdAsync(athId, specGroup, null);
        }
        
        /// CodeRemarks
        public void getAthNameByIdAsync(string athId, string specGroup, object userState) {
            if ((this.getAthNameByIdOperationCompleted == null)) {
                this.getAthNameByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAthNameByIdOperationCompleted);
            }
            this.InvokeAsync("getAthNameById", new object[] {
                        athId,
                        specGroup}, this.getAthNameByIdOperationCompleted, userState);
        }
        
        private void OngetAthNameByIdOperationCompleted(object arg) {
            if ((this.getAthNameByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAthNameByIdCompleted(this, new getAthNameByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/GetDataUsingDataContract", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public CompositeType GetDataUsingDataContract([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] CompositeType composite) {
            object[] results = this.Invoke("GetDataUsingDataContract", new object[] {
                        composite});
            return ((CompositeType)(results[0]));
        }
        
        /// CodeRemarks
        public void GetDataUsingDataContractAsync(CompositeType composite) {
            this.GetDataUsingDataContractAsync(composite, null);
        }
        
        /// CodeRemarks
        public void GetDataUsingDataContractAsync(CompositeType composite, object userState) {
            if ((this.GetDataUsingDataContractOperationCompleted == null)) {
                this.GetDataUsingDataContractOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataUsingDataContractOperationCompleted);
            }
            this.InvokeAsync("GetDataUsingDataContract", new object[] {
                        composite}, this.GetDataUsingDataContractOperationCompleted, userState);
        }
        
        private void OnGetDataUsingDataContractOperationCompleted(object arg) {
            if ((this.GetDataUsingDataContractCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataUsingDataContractCompleted(this, new GetDataUsingDataContractCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/deleteMarker", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string deleteMarker([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string markerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("deleteMarker", new object[] {
                        markerId,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void deleteMarkerAsync(string markerId, string specGroup) {
            this.deleteMarkerAsync(markerId, specGroup, null);
        }
        
        /// CodeRemarks
        public void deleteMarkerAsync(string markerId, string specGroup, object userState) {
            if ((this.deleteMarkerOperationCompleted == null)) {
                this.deleteMarkerOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteMarkerOperationCompleted);
            }
            this.InvokeAsync("deleteMarker", new object[] {
                        markerId,
                        specGroup}, this.deleteMarkerOperationCompleted, userState);
        }
        
        private void OndeleteMarkerOperationCompleted(object arg) {
            if ((this.deleteMarkerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteMarkerCompleted(this, new deleteMarkerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/addMarker", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object addMarker([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string name, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string description, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mLat, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mLng, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string type, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string interval, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("addMarker", new object[] {
                        name,
                        description,
                        mLat,
                        mLng,
                        type,
                        eventid,
                        interval,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void addMarkerAsync(string name, string description, string mLat, string mLng, string type, string eventid, string interval, string specGroup) {
            this.addMarkerAsync(name, description, mLat, mLng, type, eventid, interval, specGroup, null);
        }
        
        /// CodeRemarks
        public void addMarkerAsync(string name, string description, string mLat, string mLng, string type, string eventid, string interval, string specGroup, object userState) {
            if ((this.addMarkerOperationCompleted == null)) {
                this.addMarkerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddMarkerOperationCompleted);
            }
            this.InvokeAsync("addMarker", new object[] {
                        name,
                        description,
                        mLat,
                        mLng,
                        type,
                        eventid,
                        interval,
                        specGroup}, this.addMarkerOperationCompleted, userState);
        }
        
        private void OnaddMarkerOperationCompleted(object arg) {
            if ((this.addMarkerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addMarkerCompleted(this, new addMarkerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/validateNickName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string validateNickName([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string nickName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("validateNickName", new object[] {
                        nickName,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void validateNickNameAsync(string nickName, string specGroup) {
            this.validateNickNameAsync(nickName, specGroup, null);
        }
        
        /// CodeRemarks
        public void validateNickNameAsync(string nickName, string specGroup, object userState) {
            if ((this.validateNickNameOperationCompleted == null)) {
                this.validateNickNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvalidateNickNameOperationCompleted);
            }
            this.InvokeAsync("validateNickName", new object[] {
                        nickName,
                        specGroup}, this.validateNickNameOperationCompleted, userState);
        }
        
        private void OnvalidateNickNameOperationCompleted(object arg) {
            if ((this.validateNickNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.validateNickNameCompleted(this, new validateNickNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getAllMarkersById", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object getAllMarkersById([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Id, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getAllMarkersById", new object[] {
                        Id,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void getAllMarkersByIdAsync(string Id, string specGroup) {
            this.getAllMarkersByIdAsync(Id, specGroup, null);
        }
        
        /// CodeRemarks
        public void getAllMarkersByIdAsync(string Id, string specGroup, object userState) {
            if ((this.getAllMarkersByIdOperationCompleted == null)) {
                this.getAllMarkersByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllMarkersByIdOperationCompleted);
            }
            this.InvokeAsync("getAllMarkersById", new object[] {
                        Id,
                        specGroup}, this.getAllMarkersByIdOperationCompleted, userState);
        }
        
        private void OngetAllMarkersByIdOperationCompleted(object arg) {
            if ((this.getAllMarkersByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllMarkersByIdCompleted(this, new getAllMarkersByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/createEvent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string createEvent([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string name, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string generaldata, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string dist, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string durHrs, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string durMin, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string tss, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string hb, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("createEvent", new object[] {
                        name,
                        time,
                        eventType,
                        generaldata,
                        dist,
                        durHrs,
                        durMin,
                        tss,
                        hb,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void createEventAsync(string name, string time, string eventType, string generaldata, string dist, string durHrs, string durMin, string tss, string hb, string specGroup) {
            this.createEventAsync(name, time, eventType, generaldata, dist, durHrs, durMin, tss, hb, specGroup, null);
        }
        
        /// CodeRemarks
        public void createEventAsync(string name, string time, string eventType, string generaldata, string dist, string durHrs, string durMin, string tss, string hb, string specGroup, object userState) {
            if ((this.createEventOperationCompleted == null)) {
                this.createEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OncreateEventOperationCompleted);
            }
            this.InvokeAsync("createEvent", new object[] {
                        name,
                        time,
                        eventType,
                        generaldata,
                        dist,
                        durHrs,
                        durMin,
                        tss,
                        hb,
                        specGroup}, this.createEventOperationCompleted, userState);
        }
        
        private void OncreateEventOperationCompleted(object arg) {
            if ((this.createEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.createEventCompleted(this, new createEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/updateEvent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string updateEvent([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string name, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string time, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string generaldata, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string dist, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string durHrs, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string durMin, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string tss, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string hb, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("updateEvent", new object[] {
                        name,
                        time,
                        eventType,
                        generaldata,
                        dist,
                        durHrs,
                        durMin,
                        tss,
                        hb,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void updateEventAsync(string name, string time, string eventType, string generaldata, string dist, string durHrs, string durMin, string tss, string hb, string specGroup) {
            this.updateEventAsync(name, time, eventType, generaldata, dist, durHrs, durMin, tss, hb, specGroup, null);
        }
        
        /// CodeRemarks
        public void updateEventAsync(string name, string time, string eventType, string generaldata, string dist, string durHrs, string durMin, string tss, string hb, string specGroup, object userState) {
            if ((this.updateEventOperationCompleted == null)) {
                this.updateEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateEventOperationCompleted);
            }
            this.InvokeAsync("updateEvent", new object[] {
                        name,
                        time,
                        eventType,
                        generaldata,
                        dist,
                        durHrs,
                        durMin,
                        tss,
                        hb,
                        specGroup}, this.updateEventOperationCompleted, userState);
        }
        
        private void OnupdateEventOperationCompleted(object arg) {
            if ((this.updateEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateEventCompleted(this, new updateEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/deleteEvent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string deleteEvent([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("deleteEvent", new object[] {
                        eventId,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void deleteEventAsync(string eventId, string specGroup) {
            this.deleteEventAsync(eventId, specGroup, null);
        }
        
        /// CodeRemarks
        public void deleteEventAsync(string eventId, string specGroup, object userState) {
            if ((this.deleteEventOperationCompleted == null)) {
                this.deleteEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteEventOperationCompleted);
            }
            this.InvokeAsync("deleteEvent", new object[] {
                        eventId,
                        specGroup}, this.deleteEventOperationCompleted, userState);
        }
        
        private void OndeleteEventOperationCompleted(object arg) {
            if ((this.deleteEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteEventCompleted(this, new deleteEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getEventIdByName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string getEventIdByName([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getEventIdByName", new object[] {
                        eventName,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void getEventIdByNameAsync(string eventName, string specGroup) {
            this.getEventIdByNameAsync(eventName, specGroup, null);
        }
        
        /// CodeRemarks
        public void getEventIdByNameAsync(string eventName, string specGroup, object userState) {
            if ((this.getEventIdByNameOperationCompleted == null)) {
                this.getEventIdByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEventIdByNameOperationCompleted);
            }
            this.InvokeAsync("getEventIdByName", new object[] {
                        eventName,
                        specGroup}, this.getEventIdByNameOperationCompleted, userState);
        }
        
        private void OngetEventIdByNameOperationCompleted(object arg) {
            if ((this.getEventIdByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEventIdByNameCompleted(this, new getEventIdByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getEventIdByNameForMarkers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string getEventIdByNameForMarkers([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getEventIdByNameForMarkers", new object[] {
                        eventName,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void getEventIdByNameForMarkersAsync(string eventName, string specGroup) {
            this.getEventIdByNameForMarkersAsync(eventName, specGroup, null);
        }
        
        /// CodeRemarks
        public void getEventIdByNameForMarkersAsync(string eventName, string specGroup, object userState) {
            if ((this.getEventIdByNameForMarkersOperationCompleted == null)) {
                this.getEventIdByNameForMarkersOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEventIdByNameForMarkersOperationCompleted);
            }
            this.InvokeAsync("getEventIdByNameForMarkers", new object[] {
                        eventName,
                        specGroup}, this.getEventIdByNameForMarkersOperationCompleted, userState);
        }
        
        private void OngetEventIdByNameForMarkersOperationCompleted(object arg) {
            if ((this.getEventIdByNameForMarkersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEventIdByNameForMarkersCompleted(this, new getEventIdByNameForMarkersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getcurrentEventByDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string getcurrentEventByDate() {
            object[] results = this.Invoke("getcurrentEventByDate", new object[0]);
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void getcurrentEventByDateAsync() {
            this.getcurrentEventByDateAsync(null);
        }
        
        /// CodeRemarks
        public void getcurrentEventByDateAsync(object userState) {
            if ((this.getcurrentEventByDateOperationCompleted == null)) {
                this.getcurrentEventByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetcurrentEventByDateOperationCompleted);
            }
            this.InvokeAsync("getcurrentEventByDate", new object[0], this.getcurrentEventByDateOperationCompleted, userState);
        }
        
        private void OngetcurrentEventByDateOperationCompleted(object arg) {
            if ((this.getcurrentEventByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getcurrentEventByDateCompleted(this, new getcurrentEventByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getEventNameById", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string getEventNameById([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventId) {
            object[] results = this.Invoke("getEventNameById", new object[] {
                        eventId});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void getEventNameByIdAsync(string eventId) {
            this.getEventNameByIdAsync(eventId, null);
        }
        
        /// CodeRemarks
        public void getEventNameByIdAsync(string eventId, object userState) {
            if ((this.getEventNameByIdOperationCompleted == null)) {
                this.getEventNameByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEventNameByIdOperationCompleted);
            }
            this.InvokeAsync("getEventNameById", new object[] {
                        eventId}, this.getEventNameByIdOperationCompleted, userState);
        }
        
        private void OngetEventNameByIdOperationCompleted(object arg) {
            if ((this.getEventNameByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEventNameByIdCompleted(this, new getEventNameByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getErrprFromMobile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void getErrprFromMobile([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string err, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string id, out bool getErrprFromMobileResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool getErrprFromMobileResultSpecified) {
            object[] results = this.Invoke("getErrprFromMobile", new object[] {
                        err,
                        id});
            getErrprFromMobileResult = ((bool)(results[0]));
            getErrprFromMobileResultSpecified = ((bool)(results[1]));
        }
        
        /// CodeRemarks
        public void getErrprFromMobileAsync(string err, string id) {
            this.getErrprFromMobileAsync(err, id, null);
        }
        
        /// CodeRemarks
        public void getErrprFromMobileAsync(string err, string id, object userState) {
            if ((this.getErrprFromMobileOperationCompleted == null)) {
                this.getErrprFromMobileOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetErrprFromMobileOperationCompleted);
            }
            this.InvokeAsync("getErrprFromMobile", new object[] {
                        err,
                        id}, this.getErrprFromMobileOperationCompleted, userState);
        }
        
        private void OngetErrprFromMobileOperationCompleted(object arg) {
            if ((this.getErrprFromMobileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getErrprFromMobileCompleted(this, new getErrprFromMobileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getEventMob", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object getEventMob([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getEventMob", new object[] {
                        eventId,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void getEventMobAsync(string eventId, string specGroup) {
            this.getEventMobAsync(eventId, specGroup, null);
        }
        
        /// CodeRemarks
        public void getEventMobAsync(string eventId, string specGroup, object userState) {
            if ((this.getEventMobOperationCompleted == null)) {
                this.getEventMobOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEventMobOperationCompleted);
            }
            this.InvokeAsync("getEventMob", new object[] {
                        eventId,
                        specGroup}, this.getEventMobOperationCompleted, userState);
        }
        
        private void OngetEventMobOperationCompleted(object arg) {
            if ((this.getEventMobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEventMobCompleted(this, new getEventMobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/updatePractice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object updatePractice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string practiceJson, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string id, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("updatePractice", new object[] {
                        practiceJson,
                        id,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void updatePracticeAsync(string practiceJson, string id, string specGroup) {
            this.updatePracticeAsync(practiceJson, id, specGroup, null);
        }
        
        /// CodeRemarks
        public void updatePracticeAsync(string practiceJson, string id, string specGroup, object userState) {
            if ((this.updatePracticeOperationCompleted == null)) {
                this.updatePracticeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdatePracticeOperationCompleted);
            }
            this.InvokeAsync("updatePractice", new object[] {
                        practiceJson,
                        id,
                        specGroup}, this.updatePracticeOperationCompleted, userState);
        }
        
        private void OnupdatePracticeOperationCompleted(object arg) {
            if ((this.updatePracticeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updatePracticeCompleted(this, new updatePracticeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/insertNewProgram", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string insertNewProgram([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string programJson, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string programName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string token) {
            object[] results = this.Invoke("insertNewProgram", new object[] {
                        programJson,
                        programName,
                        specGroup,
                        token});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void insertNewProgramAsync(string programJson, string programName, string specGroup, string token) {
            this.insertNewProgramAsync(programJson, programName, specGroup, token, null);
        }
        
        /// CodeRemarks
        public void insertNewProgramAsync(string programJson, string programName, string specGroup, string token, object userState) {
            if ((this.insertNewProgramOperationCompleted == null)) {
                this.insertNewProgramOperationCompleted = new System.Threading.SendOrPostCallback(this.OninsertNewProgramOperationCompleted);
            }
            this.InvokeAsync("insertNewProgram", new object[] {
                        programJson,
                        programName,
                        specGroup,
                        token}, this.insertNewProgramOperationCompleted, userState);
        }
        
        private void OninsertNewProgramOperationCompleted(object arg) {
            if ((this.insertNewProgramCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.insertNewProgramCompleted(this, new insertNewProgramCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/populateProgram", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void populateProgram([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string programId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string programDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ownerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string token, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string isGroup, out bool populateProgramResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool populateProgramResultSpecified) {
            object[] results = this.Invoke("populateProgram", new object[] {
                        programId,
                        programDate,
                        ownerId,
                        specGroup,
                        token,
                        isGroup});
            populateProgramResult = ((bool)(results[0]));
            populateProgramResultSpecified = ((bool)(results[1]));
        }
        
        /// CodeRemarks
        public void populateProgramAsync(string programId, string programDate, string ownerId, string specGroup, string token, string isGroup) {
            this.populateProgramAsync(programId, programDate, ownerId, specGroup, token, isGroup, null);
        }
        
        /// CodeRemarks
        public void populateProgramAsync(string programId, string programDate, string ownerId, string specGroup, string token, string isGroup, object userState) {
            if ((this.populateProgramOperationCompleted == null)) {
                this.populateProgramOperationCompleted = new System.Threading.SendOrPostCallback(this.OnpopulateProgramOperationCompleted);
            }
            this.InvokeAsync("populateProgram", new object[] {
                        programId,
                        programDate,
                        ownerId,
                        specGroup,
                        token,
                        isGroup}, this.populateProgramOperationCompleted, userState);
        }
        
        private void OnpopulateProgramOperationCompleted(object arg) {
            if ((this.populateProgramCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.populateProgramCompleted(this, new populateProgramCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/updateProgramsJson", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void updateProgramsJson([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string programJson, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string id, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup, out bool updateProgramsJsonResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool updateProgramsJsonResultSpecified) {
            object[] results = this.Invoke("updateProgramsJson", new object[] {
                        programJson,
                        id,
                        specGroup});
            updateProgramsJsonResult = ((bool)(results[0]));
            updateProgramsJsonResultSpecified = ((bool)(results[1]));
        }
        
        /// CodeRemarks
        public void updateProgramsJsonAsync(string programJson, string id, string specGroup) {
            this.updateProgramsJsonAsync(programJson, id, specGroup, null);
        }
        
        /// CodeRemarks
        public void updateProgramsJsonAsync(string programJson, string id, string specGroup, object userState) {
            if ((this.updateProgramsJsonOperationCompleted == null)) {
                this.updateProgramsJsonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateProgramsJsonOperationCompleted);
            }
            this.InvokeAsync("updateProgramsJson", new object[] {
                        programJson,
                        id,
                        specGroup}, this.updateProgramsJsonOperationCompleted, userState);
        }
        
        private void OnupdateProgramsJsonOperationCompleted(object arg) {
            if ((this.updateProgramsJsonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateProgramsJsonCompleted(this, new updateProgramsJsonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/athCurrDataByDeviceId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string athCurrDataByDeviceId([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string deviceId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("athCurrDataByDeviceId", new object[] {
                        deviceId,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void athCurrDataByDeviceIdAsync(string deviceId, string specGroup) {
            this.athCurrDataByDeviceIdAsync(deviceId, specGroup, null);
        }
        
        /// CodeRemarks
        public void athCurrDataByDeviceIdAsync(string deviceId, string specGroup, object userState) {
            if ((this.athCurrDataByDeviceIdOperationCompleted == null)) {
                this.athCurrDataByDeviceIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnathCurrDataByDeviceIdOperationCompleted);
            }
            this.InvokeAsync("athCurrDataByDeviceId", new object[] {
                        deviceId,
                        specGroup}, this.athCurrDataByDeviceIdOperationCompleted, userState);
        }
        
        private void OnathCurrDataByDeviceIdOperationCompleted(object arg) {
            if ((this.athCurrDataByDeviceIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.athCurrDataByDeviceIdCompleted(this, new athCurrDataByDeviceIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getGauge", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/MongoDB.Bson", IsNullable=false)]
        public BsonElement[] getGauge(System.DateTime currTime, [System.Xml.Serialization.XmlIgnoreAttribute()] bool currTimeSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string athId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string textSize, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string isGroup, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string type) {
            object[] results = this.Invoke("getGauge", new object[] {
                        currTime,
                        currTimeSpecified,
                        athId,
                        textSize,
                        specGroup,
                        isGroup,
                        type});
            return ((BsonElement[])(results[0]));
        }
        
        /// CodeRemarks
        public void getGaugeAsync(System.DateTime currTime, bool currTimeSpecified, string athId, string textSize, string specGroup, string isGroup, string type) {
            this.getGaugeAsync(currTime, currTimeSpecified, athId, textSize, specGroup, isGroup, type, null);
        }
        
        /// CodeRemarks
        public void getGaugeAsync(System.DateTime currTime, bool currTimeSpecified, string athId, string textSize, string specGroup, string isGroup, string type, object userState) {
            if ((this.getGaugeOperationCompleted == null)) {
                this.getGaugeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetGaugeOperationCompleted);
            }
            this.InvokeAsync("getGauge", new object[] {
                        currTime,
                        currTimeSpecified,
                        athId,
                        textSize,
                        specGroup,
                        isGroup,
                        type}, this.getGaugeOperationCompleted, userState);
        }
        
        private void OngetGaugeOperationCompleted(object arg) {
            if ((this.getGaugeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getGaugeCompleted(this, new getGaugeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getGaugeMob", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string getGaugeMob(System.DateTime currTime, [System.Xml.Serialization.XmlIgnoreAttribute()] bool currTimeSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string athId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string textSize, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string isGroup, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string type) {
            object[] results = this.Invoke("getGaugeMob", new object[] {
                        currTime,
                        currTimeSpecified,
                        athId,
                        textSize,
                        specGroup,
                        isGroup,
                        type});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void getGaugeMobAsync(System.DateTime currTime, bool currTimeSpecified, string athId, string textSize, string specGroup, string isGroup, string type) {
            this.getGaugeMobAsync(currTime, currTimeSpecified, athId, textSize, specGroup, isGroup, type, null);
        }
        
        /// CodeRemarks
        public void getGaugeMobAsync(System.DateTime currTime, bool currTimeSpecified, string athId, string textSize, string specGroup, string isGroup, string type, object userState) {
            if ((this.getGaugeMobOperationCompleted == null)) {
                this.getGaugeMobOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetGaugeMobOperationCompleted);
            }
            this.InvokeAsync("getGaugeMob", new object[] {
                        currTime,
                        currTimeSpecified,
                        athId,
                        textSize,
                        specGroup,
                        isGroup,
                        type}, this.getGaugeMobOperationCompleted, userState);
        }
        
        private void OngetGaugeMobOperationCompleted(object arg) {
            if ((this.getGaugeMobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getGaugeMobCompleted(this, new getGaugeMobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/checkProgramName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string checkProgramName([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string programName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("checkProgramName", new object[] {
                        programName,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void checkProgramNameAsync(string programName, string specGroup) {
            this.checkProgramNameAsync(programName, specGroup, null);
        }
        
        /// CodeRemarks
        public void checkProgramNameAsync(string programName, string specGroup, object userState) {
            if ((this.checkProgramNameOperationCompleted == null)) {
                this.checkProgramNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckProgramNameOperationCompleted);
            }
            this.InvokeAsync("checkProgramName", new object[] {
                        programName,
                        specGroup}, this.checkProgramNameOperationCompleted, userState);
        }
        
        private void OncheckProgramNameOperationCompleted(object arg) {
            if ((this.checkProgramNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkProgramNameCompleted(this, new checkProgramNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getProgram", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object getProgram([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string programId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getProgram", new object[] {
                        programId,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void getProgramAsync(string programId, string specGroup) {
            this.getProgramAsync(programId, specGroup, null);
        }
        
        /// CodeRemarks
        public void getProgramAsync(string programId, string specGroup, object userState) {
            if ((this.getProgramOperationCompleted == null)) {
                this.getProgramOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetProgramOperationCompleted);
            }
            this.InvokeAsync("getProgram", new object[] {
                        programId,
                        specGroup}, this.getProgramOperationCompleted, userState);
        }
        
        private void OngetProgramOperationCompleted(object arg) {
            if ((this.getProgramCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getProgramCompleted(this, new getProgramCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/saveUserImage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object saveUserImage([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string athId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] imageByteData, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("saveUserImage", new object[] {
                        athId,
                        imageByteData,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void saveUserImageAsync(string athId, byte[] imageByteData, string specGroup) {
            this.saveUserImageAsync(athId, imageByteData, specGroup, null);
        }
        
        /// CodeRemarks
        public void saveUserImageAsync(string athId, byte[] imageByteData, string specGroup, object userState) {
            if ((this.saveUserImageOperationCompleted == null)) {
                this.saveUserImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsaveUserImageOperationCompleted);
            }
            this.InvokeAsync("saveUserImage", new object[] {
                        athId,
                        imageByteData,
                        specGroup}, this.saveUserImageOperationCompleted, userState);
        }
        
        private void OnsaveUserImageOperationCompleted(object arg) {
            if ((this.saveUserImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.saveUserImageCompleted(this, new saveUserImageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/deleteProgram", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object deleteProgram([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string programId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("deleteProgram", new object[] {
                        programId,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void deleteProgramAsync(string programId, string specGroup) {
            this.deleteProgramAsync(programId, specGroup, null);
        }
        
        /// CodeRemarks
        public void deleteProgramAsync(string programId, string specGroup, object userState) {
            if ((this.deleteProgramOperationCompleted == null)) {
                this.deleteProgramOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteProgramOperationCompleted);
            }
            this.InvokeAsync("deleteProgram", new object[] {
                        programId,
                        specGroup}, this.deleteProgramOperationCompleted, userState);
        }
        
        private void OndeleteProgramOperationCompleted(object arg) {
            if ((this.deleteProgramCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteProgramCompleted(this, new deleteProgramCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getListedDeviceId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string getListedDeviceId([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mail, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string psw, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getListedDeviceId", new object[] {
                        mail,
                        psw,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void getListedDeviceIdAsync(string mail, string psw, string specGroup) {
            this.getListedDeviceIdAsync(mail, psw, specGroup, null);
        }
        
        /// CodeRemarks
        public void getListedDeviceIdAsync(string mail, string psw, string specGroup, object userState) {
            if ((this.getListedDeviceIdOperationCompleted == null)) {
                this.getListedDeviceIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetListedDeviceIdOperationCompleted);
            }
            this.InvokeAsync("getListedDeviceId", new object[] {
                        mail,
                        psw,
                        specGroup}, this.getListedDeviceIdOperationCompleted, userState);
        }
        
        private void OngetListedDeviceIdOperationCompleted(object arg) {
            if ((this.getListedDeviceIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getListedDeviceIdCompleted(this, new getListedDeviceIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/attendReport", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string attendReport([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string date, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string group) {
            object[] results = this.Invoke("attendReport", new object[] {
                        date,
                        group});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void attendReportAsync(string date, string group) {
            this.attendReportAsync(date, group, null);
        }
        
        /// CodeRemarks
        public void attendReportAsync(string date, string group, object userState) {
            if ((this.attendReportOperationCompleted == null)) {
                this.attendReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnattendReportOperationCompleted);
            }
            this.InvokeAsync("attendReport", new object[] {
                        date,
                        group}, this.attendReportOperationCompleted, userState);
        }
        
        private void OnattendReportOperationCompleted(object arg) {
            if ((this.attendReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.attendReportCompleted(this, new attendReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/programsList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object programsList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("programsList", new object[] {
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void programsListAsync(string specGroup) {
            this.programsListAsync(specGroup, null);
        }
        
        /// CodeRemarks
        public void programsListAsync(string specGroup, object userState) {
            if ((this.programsListOperationCompleted == null)) {
                this.programsListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprogramsListOperationCompleted);
            }
            this.InvokeAsync("programsList", new object[] {
                        specGroup}, this.programsListOperationCompleted, userState);
        }
        
        private void OnprogramsListOperationCompleted(object arg) {
            if ((this.programsListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.programsListCompleted(this, new programsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/eventsList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object eventsList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string ownerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string isGroup, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("eventsList", new object[] {
                        ownerId,
                        isGroup,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void eventsListAsync(string ownerId, string isGroup, string specGroup) {
            this.eventsListAsync(ownerId, isGroup, specGroup, null);
        }
        
        /// CodeRemarks
        public void eventsListAsync(string ownerId, string isGroup, string specGroup, object userState) {
            if ((this.eventsListOperationCompleted == null)) {
                this.eventsListOperationCompleted = new System.Threading.SendOrPostCallback(this.OneventsListOperationCompleted);
            }
            this.InvokeAsync("eventsList", new object[] {
                        ownerId,
                        isGroup,
                        specGroup}, this.eventsListOperationCompleted, userState);
        }
        
        private void OneventsListOperationCompleted(object arg) {
            if ((this.eventsListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.eventsListCompleted(this, new eventsListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/insertNewDevice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string insertNewDevice([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string Lname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string deviceId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string psw, bool acceptedTerms, [System.Xml.Serialization.XmlIgnoreAttribute()] bool acceptedTermsSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string email, int age, [System.Xml.Serialization.XmlIgnoreAttribute()] bool ageSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("insertNewDevice", new object[] {
                        fName,
                        Lname,
                        deviceId,
                        userName,
                        psw,
                        acceptedTerms,
                        acceptedTermsSpecified,
                        email,
                        age,
                        ageSpecified,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void insertNewDeviceAsync(string fName, string Lname, string deviceId, string userName, string psw, bool acceptedTerms, bool acceptedTermsSpecified, string email, int age, bool ageSpecified, string specGroup) {
            this.insertNewDeviceAsync(fName, Lname, deviceId, userName, psw, acceptedTerms, acceptedTermsSpecified, email, age, ageSpecified, specGroup, null);
        }
        
        /// CodeRemarks
        public void insertNewDeviceAsync(string fName, string Lname, string deviceId, string userName, string psw, bool acceptedTerms, bool acceptedTermsSpecified, string email, int age, bool ageSpecified, string specGroup, object userState) {
            if ((this.insertNewDeviceOperationCompleted == null)) {
                this.insertNewDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OninsertNewDeviceOperationCompleted);
            }
            this.InvokeAsync("insertNewDevice", new object[] {
                        fName,
                        Lname,
                        deviceId,
                        userName,
                        psw,
                        acceptedTerms,
                        acceptedTermsSpecified,
                        email,
                        age,
                        ageSpecified,
                        specGroup}, this.insertNewDeviceOperationCompleted, userState);
        }
        
        private void OninsertNewDeviceOperationCompleted(object arg) {
            if ((this.insertNewDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.insertNewDeviceCompleted(this, new insertNewDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/validateUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string validateUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string usr, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string psw) {
            object[] results = this.Invoke("validateUser", new object[] {
                        usr,
                        psw});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void validateUserAsync(string usr, string psw) {
            this.validateUserAsync(usr, psw, null);
        }
        
        /// CodeRemarks
        public void validateUserAsync(string usr, string psw, object userState) {
            if ((this.validateUserOperationCompleted == null)) {
                this.validateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvalidateUserOperationCompleted);
            }
            this.InvokeAsync("validateUser", new object[] {
                        usr,
                        psw}, this.validateUserOperationCompleted, userState);
        }
        
        private void OnvalidateUserOperationCompleted(object arg) {
            if ((this.validateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.validateUserCompleted(this, new validateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/sessionUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string sessionUser([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string email, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string psw, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("sessionUser", new object[] {
                        email,
                        psw,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void sessionUserAsync(string email, string psw, string specGroup) {
            this.sessionUserAsync(email, psw, specGroup, null);
        }
        
        /// CodeRemarks
        public void sessionUserAsync(string email, string psw, string specGroup, object userState) {
            if ((this.sessionUserOperationCompleted == null)) {
                this.sessionUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsessionUserOperationCompleted);
            }
            this.InvokeAsync("sessionUser", new object[] {
                        email,
                        psw,
                        specGroup}, this.sessionUserOperationCompleted, userState);
        }
        
        private void OnsessionUserOperationCompleted(object arg) {
            if ((this.sessionUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sessionUserCompleted(this, new sessionUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getStartMarkerPosition", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string getStartMarkerPosition([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getStartMarkerPosition", new object[] {
                        eventId,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void getStartMarkerPositionAsync(string eventId, string specGroup) {
            this.getStartMarkerPositionAsync(eventId, specGroup, null);
        }
        
        /// CodeRemarks
        public void getStartMarkerPositionAsync(string eventId, string specGroup, object userState) {
            if ((this.getStartMarkerPositionOperationCompleted == null)) {
                this.getStartMarkerPositionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetStartMarkerPositionOperationCompleted);
            }
            this.InvokeAsync("getStartMarkerPosition", new object[] {
                        eventId,
                        specGroup}, this.getStartMarkerPositionOperationCompleted, userState);
        }
        
        private void OngetStartMarkerPositionOperationCompleted(object arg) {
            if ((this.getStartMarkerPositionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getStartMarkerPositionCompleted(this, new getStartMarkerPositionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getEventDateNameId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string getEventDateNameId([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getEventDateNameId", new object[] {
                        eventId,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void getEventDateNameIdAsync(string eventId, string specGroup) {
            this.getEventDateNameIdAsync(eventId, specGroup, null);
        }
        
        /// CodeRemarks
        public void getEventDateNameIdAsync(string eventId, string specGroup, object userState) {
            if ((this.getEventDateNameIdOperationCompleted == null)) {
                this.getEventDateNameIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEventDateNameIdOperationCompleted);
            }
            this.InvokeAsync("getEventDateNameId", new object[] {
                        eventId,
                        specGroup}, this.getEventDateNameIdOperationCompleted, userState);
        }
        
        private void OngetEventDateNameIdOperationCompleted(object arg) {
            if ((this.getEventDateNameIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEventDateNameIdCompleted(this, new getEventDateNameIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/groupResultsMongo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfstring", Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", NestingLevel=1)]
        public string[][] groupResultsMongo([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventStartDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("groupResultsMongo", new object[] {
                        eventId,
                        eventStartDate,
                        specGroup});
            return ((string[][])(results[0]));
        }
        
        /// CodeRemarks
        public void groupResultsMongoAsync(string eventId, string eventStartDate, string specGroup) {
            this.groupResultsMongoAsync(eventId, eventStartDate, specGroup, null);
        }
        
        /// CodeRemarks
        public void groupResultsMongoAsync(string eventId, string eventStartDate, string specGroup, object userState) {
            if ((this.groupResultsMongoOperationCompleted == null)) {
                this.groupResultsMongoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngroupResultsMongoOperationCompleted);
            }
            this.InvokeAsync("groupResultsMongo", new object[] {
                        eventId,
                        eventStartDate,
                        specGroup}, this.groupResultsMongoOperationCompleted, userState);
        }
        
        private void OngroupResultsMongoOperationCompleted(object arg) {
            if ((this.groupResultsMongoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.groupResultsMongoCompleted(this, new groupResultsMongoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getPerformanceFordate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object getPerformanceFordate([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string athId, System.DateTime date, [System.Xml.Serialization.XmlIgnoreAttribute()] bool dateSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getPerformanceFordate", new object[] {
                        athId,
                        date,
                        dateSpecified,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void getPerformanceFordateAsync(string athId, System.DateTime date, bool dateSpecified, string specGroup) {
            this.getPerformanceFordateAsync(athId, date, dateSpecified, specGroup, null);
        }
        
        /// CodeRemarks
        public void getPerformanceFordateAsync(string athId, System.DateTime date, bool dateSpecified, string specGroup, object userState) {
            if ((this.getPerformanceFordateOperationCompleted == null)) {
                this.getPerformanceFordateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPerformanceFordateOperationCompleted);
            }
            this.InvokeAsync("getPerformanceFordate", new object[] {
                        athId,
                        date,
                        dateSpecified,
                        specGroup}, this.getPerformanceFordateOperationCompleted, userState);
        }
        
        private void OngetPerformanceFordateOperationCompleted(object arg) {
            if ((this.getPerformanceFordateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPerformanceFordateCompleted(this, new getPerformanceFordateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getMyTrailForEventMongo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfstring", Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays", NestingLevel=1)]
        public string[][] getMyTrailForEventMongo([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string athId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventStartDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getMyTrailForEventMongo", new object[] {
                        athId,
                        eventId,
                        eventStartDate,
                        specGroup});
            return ((string[][])(results[0]));
        }
        
        /// CodeRemarks
        public void getMyTrailForEventMongoAsync(string athId, string eventId, string eventStartDate, string specGroup) {
            this.getMyTrailForEventMongoAsync(athId, eventId, eventStartDate, specGroup, null);
        }
        
        /// CodeRemarks
        public void getMyTrailForEventMongoAsync(string athId, string eventId, string eventStartDate, string specGroup, object userState) {
            if ((this.getMyTrailForEventMongoOperationCompleted == null)) {
                this.getMyTrailForEventMongoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetMyTrailForEventMongoOperationCompleted);
            }
            this.InvokeAsync("getMyTrailForEventMongo", new object[] {
                        athId,
                        eventId,
                        eventStartDate,
                        specGroup}, this.getMyTrailForEventMongoOperationCompleted, userState);
        }
        
        private void OngetMyTrailForEventMongoOperationCompleted(object arg) {
            if ((this.getMyTrailForEventMongoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getMyTrailForEventMongoCompleted(this, new getMyTrailForEventMongoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getAthDataByDeviceId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] getAthDataByDeviceId([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string deviceId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getAthDataByDeviceId", new object[] {
                        deviceId,
                        specGroup});
            return ((string[])(results[0]));
        }
        
        /// CodeRemarks
        public void getAthDataByDeviceIdAsync(string deviceId, string specGroup) {
            this.getAthDataByDeviceIdAsync(deviceId, specGroup, null);
        }
        
        /// CodeRemarks
        public void getAthDataByDeviceIdAsync(string deviceId, string specGroup, object userState) {
            if ((this.getAthDataByDeviceIdOperationCompleted == null)) {
                this.getAthDataByDeviceIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAthDataByDeviceIdOperationCompleted);
            }
            this.InvokeAsync("getAthDataByDeviceId", new object[] {
                        deviceId,
                        specGroup}, this.getAthDataByDeviceIdOperationCompleted, userState);
        }
        
        private void OngetAthDataByDeviceIdOperationCompleted(object arg) {
            if ((this.getAthDataByDeviceIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAthDataByDeviceIdCompleted(this, new getAthDataByDeviceIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getUserCalendar", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string getUserCalendar([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string athId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string subGroupId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getUserCalendar", new object[] {
                        athId,
                        subGroupId,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void getUserCalendarAsync(string athId, string subGroupId, string specGroup) {
            this.getUserCalendarAsync(athId, subGroupId, specGroup, null);
        }
        
        /// CodeRemarks
        public void getUserCalendarAsync(string athId, string subGroupId, string specGroup, object userState) {
            if ((this.getUserCalendarOperationCompleted == null)) {
                this.getUserCalendarOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserCalendarOperationCompleted);
            }
            this.InvokeAsync("getUserCalendar", new object[] {
                        athId,
                        subGroupId,
                        specGroup}, this.getUserCalendarOperationCompleted, userState);
        }
        
        private void OngetUserCalendarOperationCompleted(object arg) {
            if ((this.getUserCalendarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserCalendarCompleted(this, new getUserCalendarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/updateUserDataJson", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string updateUserDataJson([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string json, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string updatedById, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("updateUserDataJson", new object[] {
                        userId,
                        json,
                        updatedById,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void updateUserDataJsonAsync(string userId, string json, string updatedById, string specGroup) {
            this.updateUserDataJsonAsync(userId, json, updatedById, specGroup, null);
        }
        
        /// CodeRemarks
        public void updateUserDataJsonAsync(string userId, string json, string updatedById, string specGroup, object userState) {
            if ((this.updateUserDataJsonOperationCompleted == null)) {
                this.updateUserDataJsonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateUserDataJsonOperationCompleted);
            }
            this.InvokeAsync("updateUserDataJson", new object[] {
                        userId,
                        json,
                        updatedById,
                        specGroup}, this.updateUserDataJsonOperationCompleted, userState);
        }
        
        private void OnupdateUserDataJsonOperationCompleted(object arg) {
            if ((this.updateUserDataJsonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateUserDataJsonCompleted(this, new updateUserDataJsonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getUserCalendarFuture", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string getUserCalendarFuture([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string athId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getUserCalendarFuture", new object[] {
                        athId,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void getUserCalendarFutureAsync(string athId, string specGroup) {
            this.getUserCalendarFutureAsync(athId, specGroup, null);
        }
        
        /// CodeRemarks
        public void getUserCalendarFutureAsync(string athId, string specGroup, object userState) {
            if ((this.getUserCalendarFutureOperationCompleted == null)) {
                this.getUserCalendarFutureOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserCalendarFutureOperationCompleted);
            }
            this.InvokeAsync("getUserCalendarFuture", new object[] {
                        athId,
                        specGroup}, this.getUserCalendarFutureOperationCompleted, userState);
        }
        
        private void OngetUserCalendarFutureOperationCompleted(object arg) {
            if ((this.getUserCalendarFutureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserCalendarFutureCompleted(this, new getUserCalendarFutureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getUserCalendarPast", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string getUserCalendarPast([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string athId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getUserCalendarPast", new object[] {
                        athId,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void getUserCalendarPastAsync(string athId, string specGroup) {
            this.getUserCalendarPastAsync(athId, specGroup, null);
        }
        
        /// CodeRemarks
        public void getUserCalendarPastAsync(string athId, string specGroup, object userState) {
            if ((this.getUserCalendarPastOperationCompleted == null)) {
                this.getUserCalendarPastOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserCalendarPastOperationCompleted);
            }
            this.InvokeAsync("getUserCalendarPast", new object[] {
                        athId,
                        specGroup}, this.getUserCalendarPastOperationCompleted, userState);
        }
        
        private void OngetUserCalendarPastOperationCompleted(object arg) {
            if ((this.getUserCalendarPastCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserCalendarPastCompleted(this, new getUserCalendarPastCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/setComments", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object setComments([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string athour, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string authorId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string commentText, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("setComments", new object[] {
                        athour,
                        authorId,
                        commentText,
                        eventId,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void setCommentsAsync(string athour, string authorId, string commentText, string eventId, string specGroup) {
            this.setCommentsAsync(athour, authorId, commentText, eventId, specGroup, null);
        }
        
        /// CodeRemarks
        public void setCommentsAsync(string athour, string authorId, string commentText, string eventId, string specGroup, object userState) {
            if ((this.setCommentsOperationCompleted == null)) {
                this.setCommentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetCommentsOperationCompleted);
            }
            this.InvokeAsync("setComments", new object[] {
                        athour,
                        authorId,
                        commentText,
                        eventId,
                        specGroup}, this.setCommentsOperationCompleted, userState);
        }
        
        private void OnsetCommentsOperationCompleted(object arg) {
            if ((this.setCommentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setCommentsCompleted(this, new setCommentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/setCommentsCoach", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object setCommentsCoach([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string athour, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string authorId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string subGroupId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string isGroup, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string commentText, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("setCommentsCoach", new object[] {
                        athour,
                        authorId,
                        subGroupId,
                        isGroup,
                        commentText,
                        eventId,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void setCommentsCoachAsync(string athour, string authorId, string subGroupId, string isGroup, string commentText, string eventId, string specGroup) {
            this.setCommentsCoachAsync(athour, authorId, subGroupId, isGroup, commentText, eventId, specGroup, null);
        }
        
        /// CodeRemarks
        public void setCommentsCoachAsync(string athour, string authorId, string subGroupId, string isGroup, string commentText, string eventId, string specGroup, object userState) {
            if ((this.setCommentsCoachOperationCompleted == null)) {
                this.setCommentsCoachOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetCommentsCoachOperationCompleted);
            }
            this.InvokeAsync("setCommentsCoach", new object[] {
                        athour,
                        authorId,
                        subGroupId,
                        isGroup,
                        commentText,
                        eventId,
                        specGroup}, this.setCommentsCoachOperationCompleted, userState);
        }
        
        private void OnsetCommentsCoachOperationCompleted(object arg) {
            if ((this.setCommentsCoachCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setCommentsCoachCompleted(this, new setCommentsCoachCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getUsrObject", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object getUsrObject([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getUsrObject", new object[] {
                        userId,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void getUsrObjectAsync(string userId, string specGroup) {
            this.getUsrObjectAsync(userId, specGroup, null);
        }
        
        /// CodeRemarks
        public void getUsrObjectAsync(string userId, string specGroup, object userState) {
            if ((this.getUsrObjectOperationCompleted == null)) {
                this.getUsrObjectOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUsrObjectOperationCompleted);
            }
            this.InvokeAsync("getUsrObject", new object[] {
                        userId,
                        specGroup}, this.getUsrObjectOperationCompleted, userState);
        }
        
        private void OngetUsrObjectOperationCompleted(object arg) {
            if ((this.getUsrObjectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUsrObjectCompleted(this, new getUsrObjectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getUserPmc", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object getUserPmc([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getUserPmc", new object[] {
                        userId,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void getUserPmcAsync(string userId, string specGroup) {
            this.getUserPmcAsync(userId, specGroup, null);
        }
        
        /// CodeRemarks
        public void getUserPmcAsync(string userId, string specGroup, object userState) {
            if ((this.getUserPmcOperationCompleted == null)) {
                this.getUserPmcOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserPmcOperationCompleted);
            }
            this.InvokeAsync("getUserPmc", new object[] {
                        userId,
                        specGroup}, this.getUserPmcOperationCompleted, userState);
        }
        
        private void OngetUserPmcOperationCompleted(object arg) {
            if ((this.getUserPmcCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserPmcCompleted(this, new getUserPmcCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getGaugesForMonth", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object getGaugesForMonth([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string athId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string startDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string isGroup, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getGaugesForMonth", new object[] {
                        athId,
                        startDate,
                        isGroup,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void getGaugesForMonthAsync(string athId, string startDate, string isGroup, string specGroup) {
            this.getGaugesForMonthAsync(athId, startDate, isGroup, specGroup, null);
        }
        
        /// CodeRemarks
        public void getGaugesForMonthAsync(string athId, string startDate, string isGroup, string specGroup, object userState) {
            if ((this.getGaugesForMonthOperationCompleted == null)) {
                this.getGaugesForMonthOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetGaugesForMonthOperationCompleted);
            }
            this.InvokeAsync("getGaugesForMonth", new object[] {
                        athId,
                        startDate,
                        isGroup,
                        specGroup}, this.getGaugesForMonthOperationCompleted, userState);
        }
        
        private void OngetGaugesForMonthOperationCompleted(object arg) {
            if ((this.getGaugesForMonthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getGaugesForMonthCompleted(this, new getGaugesForMonthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/insertCompUserKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string insertCompUserKey([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userKey, int comp, [System.Xml.Serialization.XmlIgnoreAttribute()] bool compSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("insertCompUserKey", new object[] {
                        userId,
                        userKey,
                        comp,
                        compSpecified,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void insertCompUserKeyAsync(string userId, string userKey, int comp, bool compSpecified, string specGroup) {
            this.insertCompUserKeyAsync(userId, userKey, comp, compSpecified, specGroup, null);
        }
        
        /// CodeRemarks
        public void insertCompUserKeyAsync(string userId, string userKey, int comp, bool compSpecified, string specGroup, object userState) {
            if ((this.insertCompUserKeyOperationCompleted == null)) {
                this.insertCompUserKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OninsertCompUserKeyOperationCompleted);
            }
            this.InvokeAsync("insertCompUserKey", new object[] {
                        userId,
                        userKey,
                        comp,
                        compSpecified,
                        specGroup}, this.insertCompUserKeyOperationCompleted, userState);
        }
        
        private void OninsertCompUserKeyOperationCompleted(object arg) {
            if ((this.insertCompUserKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.insertCompUserKeyCompleted(this, new insertCompUserKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/syncSuunto", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void syncSuunto([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string startDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string endDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup, out bool syncSuuntoResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool syncSuuntoResultSpecified) {
            object[] results = this.Invoke("syncSuunto", new object[] {
                        userid,
                        startDate,
                        endDate,
                        specGroup});
            syncSuuntoResult = ((bool)(results[0]));
            syncSuuntoResultSpecified = ((bool)(results[1]));
        }
        
        /// CodeRemarks
        public void syncSuuntoAsync(string userid, string startDate, string endDate, string specGroup) {
            this.syncSuuntoAsync(userid, startDate, endDate, specGroup, null);
        }
        
        /// CodeRemarks
        public void syncSuuntoAsync(string userid, string startDate, string endDate, string specGroup, object userState) {
            if ((this.syncSuuntoOperationCompleted == null)) {
                this.syncSuuntoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsyncSuuntoOperationCompleted);
            }
            this.InvokeAsync("syncSuunto", new object[] {
                        userid,
                        startDate,
                        endDate,
                        specGroup}, this.syncSuuntoOperationCompleted, userState);
        }
        
        private void OnsyncSuuntoOperationCompleted(object arg) {
            if ((this.syncSuuntoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.syncSuuntoCompleted(this, new syncSuuntoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getPrcticeList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object getPrcticeList([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string token, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getPrcticeList", new object[] {
                        token,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void getPrcticeListAsync(string token, string specGroup) {
            this.getPrcticeListAsync(token, specGroup, null);
        }
        
        /// CodeRemarks
        public void getPrcticeListAsync(string token, string specGroup, object userState) {
            if ((this.getPrcticeListOperationCompleted == null)) {
                this.getPrcticeListOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPrcticeListOperationCompleted);
            }
            this.InvokeAsync("getPrcticeList", new object[] {
                        token,
                        specGroup}, this.getPrcticeListOperationCompleted, userState);
        }
        
        private void OngetPrcticeListOperationCompleted(object arg) {
            if ((this.getPrcticeListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPrcticeListCompleted(this, new getPrcticeListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getUserCalendarToday", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string getUserCalendarToday([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string athId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getUserCalendarToday", new object[] {
                        athId,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void getUserCalendarTodayAsync(string athId, string specGroup) {
            this.getUserCalendarTodayAsync(athId, specGroup, null);
        }
        
        /// CodeRemarks
        public void getUserCalendarTodayAsync(string athId, string specGroup, object userState) {
            if ((this.getUserCalendarTodayOperationCompleted == null)) {
                this.getUserCalendarTodayOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUserCalendarTodayOperationCompleted);
            }
            this.InvokeAsync("getUserCalendarToday", new object[] {
                        athId,
                        specGroup}, this.getUserCalendarTodayOperationCompleted, userState);
        }
        
        private void OngetUserCalendarTodayOperationCompleted(object arg) {
            if ((this.getUserCalendarTodayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUserCalendarTodayCompleted(this, new getUserCalendarTodayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/updateSubGroupName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object updateSubGroupName([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string name, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string description, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string id, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("updateSubGroupName", new object[] {
                        name,
                        description,
                        id,
                        userId,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void updateSubGroupNameAsync(string name, string description, string id, string userId, string specGroup) {
            this.updateSubGroupNameAsync(name, description, id, userId, specGroup, null);
        }
        
        /// CodeRemarks
        public void updateSubGroupNameAsync(string name, string description, string id, string userId, string specGroup, object userState) {
            if ((this.updateSubGroupNameOperationCompleted == null)) {
                this.updateSubGroupNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateSubGroupNameOperationCompleted);
            }
            this.InvokeAsync("updateSubGroupName", new object[] {
                        name,
                        description,
                        id,
                        userId,
                        specGroup}, this.updateSubGroupNameOperationCompleted, userState);
        }
        
        private void OnupdateSubGroupNameOperationCompleted(object arg) {
            if ((this.updateSubGroupNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateSubGroupNameCompleted(this, new updateSubGroupNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getUsrLoginData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object getUsrLoginData([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string usr, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string psw, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getUsrLoginData", new object[] {
                        usr,
                        psw,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void getUsrLoginDataAsync(string usr, string psw, string specGroup) {
            this.getUsrLoginDataAsync(usr, psw, specGroup, null);
        }
        
        /// CodeRemarks
        public void getUsrLoginDataAsync(string usr, string psw, string specGroup, object userState) {
            if ((this.getUsrLoginDataOperationCompleted == null)) {
                this.getUsrLoginDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUsrLoginDataOperationCompleted);
            }
            this.InvokeAsync("getUsrLoginData", new object[] {
                        usr,
                        psw,
                        specGroup}, this.getUsrLoginDataOperationCompleted, userState);
        }
        
        private void OngetUsrLoginDataOperationCompleted(object arg) {
            if ((this.getUsrLoginDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUsrLoginDataCompleted(this, new getUsrLoginDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/resetCalendarEvent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void resetCalendarEvent([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string startDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string endDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string opType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string isGroup, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string desc, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string tss, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string hb, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string pace, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string distance, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup, out bool resetCalendarEventResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool resetCalendarEventResultSpecified) {
            object[] results = this.Invoke("resetCalendarEvent", new object[] {
                        startDate,
                        endDate,
                        eventId,
                        userId,
                        opType,
                        isGroup,
                        desc,
                        tss,
                        hb,
                        pace,
                        distance,
                        specGroup});
            resetCalendarEventResult = ((bool)(results[0]));
            resetCalendarEventResultSpecified = ((bool)(results[1]));
        }
        
        /// CodeRemarks
        public void resetCalendarEventAsync(string startDate, string endDate, string eventId, string userId, string opType, string isGroup, string desc, string tss, string hb, string pace, string distance, string specGroup) {
            this.resetCalendarEventAsync(startDate, endDate, eventId, userId, opType, isGroup, desc, tss, hb, pace, distance, specGroup, null);
        }
        
        /// CodeRemarks
        public void resetCalendarEventAsync(string startDate, string endDate, string eventId, string userId, string opType, string isGroup, string desc, string tss, string hb, string pace, string distance, string specGroup, object userState) {
            if ((this.resetCalendarEventOperationCompleted == null)) {
                this.resetCalendarEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OnresetCalendarEventOperationCompleted);
            }
            this.InvokeAsync("resetCalendarEvent", new object[] {
                        startDate,
                        endDate,
                        eventId,
                        userId,
                        opType,
                        isGroup,
                        desc,
                        tss,
                        hb,
                        pace,
                        distance,
                        specGroup}, this.resetCalendarEventOperationCompleted, userState);
        }
        
        private void OnresetCalendarEventOperationCompleted(object arg) {
            if ((this.resetCalendarEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.resetCalendarEventCompleted(this, new resetCalendarEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getEventGraph", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object getEventGraph([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getEventGraph", new object[] {
                        eventId,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void getEventGraphAsync(string eventId, string specGroup) {
            this.getEventGraphAsync(eventId, specGroup, null);
        }
        
        /// CodeRemarks
        public void getEventGraphAsync(string eventId, string specGroup, object userState) {
            if ((this.getEventGraphOperationCompleted == null)) {
                this.getEventGraphOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEventGraphOperationCompleted);
            }
            this.InvokeAsync("getEventGraph", new object[] {
                        eventId,
                        specGroup}, this.getEventGraphOperationCompleted, userState);
        }
        
        private void OngetEventGraphOperationCompleted(object arg) {
            if ((this.getEventGraphCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEventGraphCompleted(this, new getEventGraphCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getNearestEventMakers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object getNearestEventMakers([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string athId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getNearestEventMakers", new object[] {
                        athId,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void getNearestEventMakersAsync(string athId, string specGroup) {
            this.getNearestEventMakersAsync(athId, specGroup, null);
        }
        
        /// CodeRemarks
        public void getNearestEventMakersAsync(string athId, string specGroup, object userState) {
            if ((this.getNearestEventMakersOperationCompleted == null)) {
                this.getNearestEventMakersOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNearestEventMakersOperationCompleted);
            }
            this.InvokeAsync("getNearestEventMakers", new object[] {
                        athId,
                        specGroup}, this.getNearestEventMakersOperationCompleted, userState);
        }
        
        private void OngetNearestEventMakersOperationCompleted(object arg) {
            if ((this.getNearestEventMakersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNearestEventMakersCompleted(this, new getNearestEventMakersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/athData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object athData([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string athId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("athData", new object[] {
                        athId,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void athDataAsync(string athId, string specGroup) {
            this.athDataAsync(athId, specGroup, null);
        }
        
        /// CodeRemarks
        public void athDataAsync(string athId, string specGroup, object userState) {
            if ((this.athDataOperationCompleted == null)) {
                this.athDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnathDataOperationCompleted);
            }
            this.InvokeAsync("athData", new object[] {
                        athId,
                        specGroup}, this.athDataOperationCompleted, userState);
        }
        
        private void OnathDataOperationCompleted(object arg) {
            if ((this.athDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.athDataCompleted(this, new athDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/removeMultiFromGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void removeMultiFromGroup([System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")] string[] athList, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string groupId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup, out bool removeMultiFromGroupResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool removeMultiFromGroupResultSpecified) {
            object[] results = this.Invoke("removeMultiFromGroup", new object[] {
                        athList,
                        groupId,
                        specGroup});
            removeMultiFromGroupResult = ((bool)(results[0]));
            removeMultiFromGroupResultSpecified = ((bool)(results[1]));
        }
        
        /// CodeRemarks
        public void removeMultiFromGroupAsync(string[] athList, string groupId, string specGroup) {
            this.removeMultiFromGroupAsync(athList, groupId, specGroup, null);
        }
        
        /// CodeRemarks
        public void removeMultiFromGroupAsync(string[] athList, string groupId, string specGroup, object userState) {
            if ((this.removeMultiFromGroupOperationCompleted == null)) {
                this.removeMultiFromGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveMultiFromGroupOperationCompleted);
            }
            this.InvokeAsync("removeMultiFromGroup", new object[] {
                        athList,
                        groupId,
                        specGroup}, this.removeMultiFromGroupOperationCompleted, userState);
        }
        
        private void OnremoveMultiFromGroupOperationCompleted(object arg) {
            if ((this.removeMultiFromGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeMultiFromGroupCompleted(this, new removeMultiFromGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getComments", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object getComments([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string id, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string type, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getComments", new object[] {
                        id,
                        type,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void getCommentsAsync(string id, string type, string specGroup) {
            this.getCommentsAsync(id, type, specGroup, null);
        }
        
        /// CodeRemarks
        public void getCommentsAsync(string id, string type, string specGroup, object userState) {
            if ((this.getCommentsOperationCompleted == null)) {
                this.getCommentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCommentsOperationCompleted);
            }
            this.InvokeAsync("getComments", new object[] {
                        id,
                        type,
                        specGroup}, this.getCommentsOperationCompleted, userState);
        }
        
        private void OngetCommentsOperationCompleted(object arg) {
            if ((this.getCommentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCommentsCompleted(this, new getCommentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/fieldAthletsAndEvenets", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object fieldAthletsAndEvenets([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string token, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fieldId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("fieldAthletsAndEvenets", new object[] {
                        token,
                        fieldId,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void fieldAthletsAndEvenetsAsync(string token, string fieldId, string specGroup) {
            this.fieldAthletsAndEvenetsAsync(token, fieldId, specGroup, null);
        }
        
        /// CodeRemarks
        public void fieldAthletsAndEvenetsAsync(string token, string fieldId, string specGroup, object userState) {
            if ((this.fieldAthletsAndEvenetsOperationCompleted == null)) {
                this.fieldAthletsAndEvenetsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfieldAthletsAndEvenetsOperationCompleted);
            }
            this.InvokeAsync("fieldAthletsAndEvenets", new object[] {
                        token,
                        fieldId,
                        specGroup}, this.fieldAthletsAndEvenetsOperationCompleted, userState);
        }
        
        private void OnfieldAthletsAndEvenetsOperationCompleted(object arg) {
            if ((this.fieldAthletsAndEvenetsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.fieldAthletsAndEvenetsCompleted(this, new fieldAthletsAndEvenetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/updateMomgoGroups", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string updateMomgoGroups([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string groupName, int groupid, [System.Xml.Serialization.XmlIgnoreAttribute()] bool groupidSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string subGroupId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userNickName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userUrl, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userImg, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("updateMomgoGroups", new object[] {
                        groupName,
                        groupid,
                        groupidSpecified,
                        subGroupId,
                        userNickName,
                        userUrl,
                        userImg,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void updateMomgoGroupsAsync(string groupName, int groupid, bool groupidSpecified, string subGroupId, string userNickName, string userUrl, string userImg, string specGroup) {
            this.updateMomgoGroupsAsync(groupName, groupid, groupidSpecified, subGroupId, userNickName, userUrl, userImg, specGroup, null);
        }
        
        /// CodeRemarks
        public void updateMomgoGroupsAsync(string groupName, int groupid, bool groupidSpecified, string subGroupId, string userNickName, string userUrl, string userImg, string specGroup, object userState) {
            if ((this.updateMomgoGroupsOperationCompleted == null)) {
                this.updateMomgoGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateMomgoGroupsOperationCompleted);
            }
            this.InvokeAsync("updateMomgoGroups", new object[] {
                        groupName,
                        groupid,
                        groupidSpecified,
                        subGroupId,
                        userNickName,
                        userUrl,
                        userImg,
                        specGroup}, this.updateMomgoGroupsOperationCompleted, userState);
        }
        
        private void OnupdateMomgoGroupsOperationCompleted(object arg) {
            if ((this.updateMomgoGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateMomgoGroupsCompleted(this, new updateMomgoGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/removeAthFromGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void removeAthFromGroup([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string groupId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup, out bool removeAthFromGroupResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool removeAthFromGroupResultSpecified) {
            object[] results = this.Invoke("removeAthFromGroup", new object[] {
                        groupId,
                        userId,
                        specGroup});
            removeAthFromGroupResult = ((bool)(results[0]));
            removeAthFromGroupResultSpecified = ((bool)(results[1]));
        }
        
        /// CodeRemarks
        public void removeAthFromGroupAsync(string groupId, string userId, string specGroup) {
            this.removeAthFromGroupAsync(groupId, userId, specGroup, null);
        }
        
        /// CodeRemarks
        public void removeAthFromGroupAsync(string groupId, string userId, string specGroup, object userState) {
            if ((this.removeAthFromGroupOperationCompleted == null)) {
                this.removeAthFromGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveAthFromGroupOperationCompleted);
            }
            this.InvokeAsync("removeAthFromGroup", new object[] {
                        groupId,
                        userId,
                        specGroup}, this.removeAthFromGroupOperationCompleted, userState);
        }
        
        private void OnremoveAthFromGroupOperationCompleted(object arg) {
            if ((this.removeAthFromGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeAthFromGroupCompleted(this, new removeAthFromGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/removeFromGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string removeFromGroup(int groupid, [System.Xml.Serialization.XmlIgnoreAttribute()] bool groupidSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userNickName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("removeFromGroup", new object[] {
                        groupid,
                        groupidSpecified,
                        userNickName,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void removeFromGroupAsync(int groupid, bool groupidSpecified, string userNickName, string specGroup) {
            this.removeFromGroupAsync(groupid, groupidSpecified, userNickName, specGroup, null);
        }
        
        /// CodeRemarks
        public void removeFromGroupAsync(int groupid, bool groupidSpecified, string userNickName, string specGroup, object userState) {
            if ((this.removeFromGroupOperationCompleted == null)) {
                this.removeFromGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnremoveFromGroupOperationCompleted);
            }
            this.InvokeAsync("removeFromGroup", new object[] {
                        groupid,
                        groupidSpecified,
                        userNickName,
                        specGroup}, this.removeFromGroupOperationCompleted, userState);
        }
        
        private void OnremoveFromGroupOperationCompleted(object arg) {
            if ((this.removeFromGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.removeFromGroupCompleted(this, new removeFromGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getIyemsForGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string getIyemsForGroup(int groupId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool groupIdSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getIyemsForGroup", new object[] {
                        groupId,
                        groupIdSpecified,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void getIyemsForGroupAsync(int groupId, bool groupIdSpecified, string specGroup) {
            this.getIyemsForGroupAsync(groupId, groupIdSpecified, specGroup, null);
        }
        
        /// CodeRemarks
        public void getIyemsForGroupAsync(int groupId, bool groupIdSpecified, string specGroup, object userState) {
            if ((this.getIyemsForGroupOperationCompleted == null)) {
                this.getIyemsForGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetIyemsForGroupOperationCompleted);
            }
            this.InvokeAsync("getIyemsForGroup", new object[] {
                        groupId,
                        groupIdSpecified,
                        specGroup}, this.getIyemsForGroupOperationCompleted, userState);
        }
        
        private void OngetIyemsForGroupOperationCompleted(object arg) {
            if ((this.getIyemsForGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getIyemsForGroupCompleted(this, new getIyemsForGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/replaceUtil", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string replaceUtil([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("replaceUtil", new object[] {
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void replaceUtilAsync(string specGroup) {
            this.replaceUtilAsync(specGroup, null);
        }
        
        /// CodeRemarks
        public void replaceUtilAsync(string specGroup, object userState) {
            if ((this.replaceUtilOperationCompleted == null)) {
                this.replaceUtilOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreplaceUtilOperationCompleted);
            }
            this.InvokeAsync("replaceUtil", new object[] {
                        specGroup}, this.replaceUtilOperationCompleted, userState);
        }
        
        private void OnreplaceUtilOperationCompleted(object arg) {
            if ((this.replaceUtilCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.replaceUtilCompleted(this, new replaceUtilCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getPmc", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object getPmc([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getPmc", new object[] {
                        userId,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void getPmcAsync(string userId, string specGroup) {
            this.getPmcAsync(userId, specGroup, null);
        }
        
        /// CodeRemarks
        public void getPmcAsync(string userId, string specGroup, object userState) {
            if ((this.getPmcOperationCompleted == null)) {
                this.getPmcOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPmcOperationCompleted);
            }
            this.InvokeAsync("getPmc", new object[] {
                        userId,
                        specGroup}, this.getPmcOperationCompleted, userState);
        }
        
        private void OngetPmcOperationCompleted(object arg) {
            if ((this.getPmcCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPmcCompleted(this, new getPmcCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getAllathForGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] getAllathForGroup(int groupId, [System.Xml.Serialization.XmlIgnoreAttribute()] bool groupIdSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getAllathForGroup", new object[] {
                        groupId,
                        groupIdSpecified,
                        specGroup});
            return ((string[])(results[0]));
        }
        
        /// CodeRemarks
        public void getAllathForGroupAsync(int groupId, bool groupIdSpecified, string specGroup) {
            this.getAllathForGroupAsync(groupId, groupIdSpecified, specGroup, null);
        }
        
        /// CodeRemarks
        public void getAllathForGroupAsync(int groupId, bool groupIdSpecified, string specGroup, object userState) {
            if ((this.getAllathForGroupOperationCompleted == null)) {
                this.getAllathForGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetAllathForGroupOperationCompleted);
            }
            this.InvokeAsync("getAllathForGroup", new object[] {
                        groupId,
                        groupIdSpecified,
                        specGroup}, this.getAllathForGroupOperationCompleted, userState);
        }
        
        private void OngetAllathForGroupOperationCompleted(object arg) {
            if ((this.getAllathForGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getAllathForGroupCompleted(this, new getAllathForGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getBestResults", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string getBestResults([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fullName) {
            object[] results = this.Invoke("getBestResults", new object[] {
                        fullName});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void getBestResultsAsync(string fullName) {
            this.getBestResultsAsync(fullName, null);
        }
        
        /// CodeRemarks
        public void getBestResultsAsync(string fullName, object userState) {
            if ((this.getBestResultsOperationCompleted == null)) {
                this.getBestResultsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetBestResultsOperationCompleted);
            }
            this.InvokeAsync("getBestResults", new object[] {
                        fullName}, this.getBestResultsOperationCompleted, userState);
        }
        
        private void OngetBestResultsOperationCompleted(object arg) {
            if ((this.getBestResultsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getBestResultsCompleted(this, new getBestResultsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getNearestEvent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfBsonElement", Namespace="http://schemas.datacontract.org/2004/07/MongoDB.Bson")]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.datacontract.org/2004/07/MongoDB.Bson", IsNullable=false, NestingLevel=1)]
        public BsonElement[][] getNearestEvent([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string athId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getNearestEvent", new object[] {
                        athId,
                        specGroup});
            return ((BsonElement[][])(results[0]));
        }
        
        /// CodeRemarks
        public void getNearestEventAsync(string athId, string specGroup) {
            this.getNearestEventAsync(athId, specGroup, null);
        }
        
        /// CodeRemarks
        public void getNearestEventAsync(string athId, string specGroup, object userState) {
            if ((this.getNearestEventOperationCompleted == null)) {
                this.getNearestEventOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNearestEventOperationCompleted);
            }
            this.InvokeAsync("getNearestEvent", new object[] {
                        athId,
                        specGroup}, this.getNearestEventOperationCompleted, userState);
        }
        
        private void OngetNearestEventOperationCompleted(object arg) {
            if ((this.getNearestEventCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNearestEventCompleted(this, new getNearestEventCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getBestResultsForAth", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] getBestResultsForAth([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string fullName, bool save, [System.Xml.Serialization.XmlIgnoreAttribute()] bool saveSpecified, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getBestResultsForAth", new object[] {
                        fullName,
                        save,
                        saveSpecified,
                        userId,
                        specGroup});
            return ((string[])(results[0]));
        }
        
        /// CodeRemarks
        public void getBestResultsForAthAsync(string fullName, bool save, bool saveSpecified, string userId, string specGroup) {
            this.getBestResultsForAthAsync(fullName, save, saveSpecified, userId, specGroup, null);
        }
        
        /// CodeRemarks
        public void getBestResultsForAthAsync(string fullName, bool save, bool saveSpecified, string userId, string specGroup, object userState) {
            if ((this.getBestResultsForAthOperationCompleted == null)) {
                this.getBestResultsForAthOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetBestResultsForAthOperationCompleted);
            }
            this.InvokeAsync("getBestResultsForAth", new object[] {
                        fullName,
                        save,
                        saveSpecified,
                        userId,
                        specGroup}, this.getBestResultsForAthOperationCompleted, userState);
        }
        
        private void OngetBestResultsForAthOperationCompleted(object arg) {
            if ((this.getBestResultsForAthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getBestResultsForAthCompleted(this, new getBestResultsForAthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/updateMeberNotes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public object updateMeberNotes([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string notes, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string id, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string usernn, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string attended, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string duration, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string distance, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string trainScore, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string type, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("updateMeberNotes", new object[] {
                        notes,
                        id,
                        eventId,
                        usernn,
                        attended,
                        duration,
                        distance,
                        trainScore,
                        type,
                        specGroup});
            return ((object)(results[0]));
        }
        
        /// CodeRemarks
        public void updateMeberNotesAsync(string notes, string id, string eventId, string usernn, string attended, string duration, string distance, string trainScore, string type, string specGroup) {
            this.updateMeberNotesAsync(notes, id, eventId, usernn, attended, duration, distance, trainScore, type, specGroup, null);
        }
        
        /// CodeRemarks
        public void updateMeberNotesAsync(string notes, string id, string eventId, string usernn, string attended, string duration, string distance, string trainScore, string type, string specGroup, object userState) {
            if ((this.updateMeberNotesOperationCompleted == null)) {
                this.updateMeberNotesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateMeberNotesOperationCompleted);
            }
            this.InvokeAsync("updateMeberNotes", new object[] {
                        notes,
                        id,
                        eventId,
                        usernn,
                        attended,
                        duration,
                        distance,
                        trainScore,
                        type,
                        specGroup}, this.updateMeberNotesOperationCompleted, userState);
        }
        
        private void OnupdateMeberNotesOperationCompleted(object arg) {
            if ((this.updateMeberNotesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateMeberNotesCompleted(this, new updateMeberNotesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getNotesMob", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string getNotesMob([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string id, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string group, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getNotesMob", new object[] {
                        id,
                        group,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void getNotesMobAsync(string id, string group, string specGroup) {
            this.getNotesMobAsync(id, group, specGroup, null);
        }
        
        /// CodeRemarks
        public void getNotesMobAsync(string id, string group, string specGroup, object userState) {
            if ((this.getNotesMobOperationCompleted == null)) {
                this.getNotesMobOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetNotesMobOperationCompleted);
            }
            this.InvokeAsync("getNotesMob", new object[] {
                        id,
                        group,
                        specGroup}, this.getNotesMobOperationCompleted, userState);
        }
        
        private void OngetNotesMobOperationCompleted(object arg) {
            if ((this.getNotesMobCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getNotesMobCompleted(this, new getNotesMobCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getEventInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(Namespace="http://schemas.microsoft.com/2003/10/Serialization/Arrays")]
        public string[] getEventInfo([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string eventName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getEventInfo", new object[] {
                        eventName,
                        specGroup});
            return ((string[])(results[0]));
        }
        
        /// CodeRemarks
        public void getEventInfoAsync(string eventName, string specGroup) {
            this.getEventInfoAsync(eventName, specGroup, null);
        }
        
        /// CodeRemarks
        public void getEventInfoAsync(string eventName, string specGroup, object userState) {
            if ((this.getEventInfoOperationCompleted == null)) {
                this.getEventInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetEventInfoOperationCompleted);
            }
            this.InvokeAsync("getEventInfo", new object[] {
                        eventName,
                        specGroup}, this.getEventInfoOperationCompleted, userState);
        }
        
        private void OngetEventInfoOperationCompleted(object arg) {
            if ((this.getEventInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getEventInfoCompleted(this, new getEventInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/addSync", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string addSync([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string userId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string url, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string mon, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string token, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("addSync", new object[] {
                        userId,
                        url,
                        mon,
                        token,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void addSyncAsync(string userId, string url, string mon, string token, string specGroup) {
            this.addSyncAsync(userId, url, mon, token, specGroup, null);
        }
        
        /// CodeRemarks
        public void addSyncAsync(string userId, string url, string mon, string token, string specGroup, object userState) {
            if ((this.addSyncOperationCompleted == null)) {
                this.addSyncOperationCompleted = new System.Threading.SendOrPostCallback(this.OnaddSyncOperationCompleted);
            }
            this.InvokeAsync("addSync", new object[] {
                        userId,
                        url,
                        mon,
                        token,
                        specGroup}, this.addSyncOperationCompleted, userState);
        }
        
        private void OnaddSyncOperationCompleted(object arg) {
            if ((this.addSyncCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.addSyncCompleted(this, new addSyncCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/validatSync", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string validatSync([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string usrId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string url) {
            object[] results = this.Invoke("validatSync", new object[] {
                        usrId,
                        url});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void validatSyncAsync(string usrId, string url) {
            this.validatSyncAsync(usrId, url, null);
        }
        
        /// CodeRemarks
        public void validatSyncAsync(string usrId, string url, object userState) {
            if ((this.validatSyncOperationCompleted == null)) {
                this.validatSyncOperationCompleted = new System.Threading.SendOrPostCallback(this.OnvalidatSyncOperationCompleted);
            }
            this.InvokeAsync("validatSync", new object[] {
                        usrId,
                        url}, this.validatSyncOperationCompleted, userState);
        }
        
        private void OnvalidatSyncOperationCompleted(object arg) {
            if ((this.validatSyncCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.validatSyncCompleted(this, new validatSyncCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/getUsrGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string getUsrGroup([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string usr, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string psw, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            object[] results = this.Invoke("getUsrGroup", new object[] {
                        usr,
                        psw,
                        specGroup});
            return ((string)(results[0]));
        }
        
        /// CodeRemarks
        public void getUsrGroupAsync(string usr, string psw, string specGroup) {
            this.getUsrGroupAsync(usr, psw, specGroup, null);
        }
        
        /// CodeRemarks
        public void getUsrGroupAsync(string usr, string psw, string specGroup, object userState) {
            if ((this.getUsrGroupOperationCompleted == null)) {
                this.getUsrGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetUsrGroupOperationCompleted);
            }
            this.InvokeAsync("getUsrGroup", new object[] {
                        usr,
                        psw,
                        specGroup}, this.getUsrGroupOperationCompleted, userState);
        }
        
        private void OngetUsrGroupOperationCompleted(object arg) {
            if ((this.getUsrGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getUsrGroupCompleted(this, new getUsrGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IService1/updateAthPersonalData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void updateAthPersonalData([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string athId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string firstName, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string lastname, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string phone, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string email, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary", IsNullable=true)] byte[] imageByteData, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string specGroup) {
            this.Invoke("updateAthPersonalData", new object[] {
                        athId,
                        firstName,
                        lastname,
                        phone,
                        email,
                        imageByteData,
                        specGroup});
        }
        
        /// CodeRemarks
        public void updateAthPersonalDataAsync(string athId, string firstName, string lastname, string phone, string email, byte[] imageByteData, string specGroup) {
            this.updateAthPersonalDataAsync(athId, firstName, lastname, phone, email, imageByteData, specGroup, null);
        }
        
        /// CodeRemarks
        public void updateAthPersonalDataAsync(string athId, string firstName, string lastname, string phone, string email, byte[] imageByteData, string specGroup, object userState) {
            if ((this.updateAthPersonalDataOperationCompleted == null)) {
                this.updateAthPersonalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateAthPersonalDataOperationCompleted);
            }
            this.InvokeAsync("updateAthPersonalData", new object[] {
                        athId,
                        firstName,
                        lastname,
                        phone,
                        email,
                        imageByteData,
                        specGroup}, this.updateAthPersonalDataOperationCompleted, userState);
        }
        
        private void OnupdateAthPersonalDataOperationCompleted(object arg) {
            if ((this.updateAthPersonalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateAthPersonalDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// CodeRemarks
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/tracker_srv")]
    public partial class CompositeType {
        
        /// <remarks/>
        public bool BoolValue;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BoolValueSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string StringValue;
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/MongoDB.Bson")]
    public partial class BsonValue {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.datacontract.org/2004/07/MongoDB.Bson")]
    public partial class BsonElement {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string _name;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public BsonValue _value;
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void updateMomgoDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void syncSuunto60CompletedEventHandler(object sender, syncSuunto60CompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class syncSuunto60CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal syncSuunto60CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public bool syncSuunto60Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// CodeRemarks
        public bool syncSuunto60ResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void installgCompletedEventHandler(object sender, installgCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class installgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal installgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void convertUsersCompletedEventHandler(object sender, convertUsersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class convertUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal convertUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void convertEventsCompletedEventHandler(object sender, convertEventsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class convertEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal convertEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getCodeCompletedEventHandler(object sender, getCodeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getMobTotalsGraphCompletedEventHandler(object sender, getMobTotalsGraphCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMobTotalsGraphCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMobTotalsGraphCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void addPracticeCompletedEventHandler(object sender, addPracticeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addPracticeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addPracticeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void setEventInCalendarCompletedEventHandler(object sender, setEventInCalendarCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setEventInCalendarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setEventInCalendarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void restPaswordCompletedEventHandler(object sender, restPaswordCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class restPaswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal restPaswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public int restPaswordResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// CodeRemarks
        public bool restPaswordResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getEventTotalsMobCompletedEventHandler(object sender, getEventTotalsMobCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEventTotalsMobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEventTotalsMobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getPracticeTotalsCompletedEventHandler(object sender, getPracticeTotalsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPracticeTotalsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPracticeTotalsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void resetEventTimeCompletedEventHandler(object sender, resetEventTimeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class resetEventTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal resetEventTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public bool resetEventTimeResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// CodeRemarks
        public bool resetEventTimeResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void updateMarkerCompletedEventHandler(object sender, updateMarkerCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateMarkerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateMarkerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void testPmcCompletedEventHandler(object sender, testPmcCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class testPmcCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal testPmcCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public bool testPmcResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// CodeRemarks
        public bool testPmcResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getTrackPointsCompletedEventHandler(object sender, getTrackPointsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getTrackPointsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getTrackPointsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getGroupsCompletedEventHandler(object sender, getGroupsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getCoachWeekTotalsCompletedEventHandler(object sender, getCoachWeekTotalsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCoachWeekTotalsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCoachWeekTotalsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getAllMarkersByPracticeCompletedEventHandler(object sender, getAllMarkersByPracticeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllMarkersByPracticeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllMarkersByPracticeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void athGeneralListCompletedEventHandler(object sender, athGeneralListCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class athGeneralListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal athGeneralListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void insertMultiToGroupCompletedEventHandler(object sender, insertMultiToGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class insertMultiToGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal insertMultiToGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public bool insertMultiToGroupResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// CodeRemarks
        public bool insertMultiToGroupResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getEventReportCompletedEventHandler(object sender, getEventReportCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEventReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEventReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void updateMomgoDataFromFoxiCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void athGaugesCompletedEventHandler(object sender, athGaugesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class athGaugesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal athGaugesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getFutureEventCompletedEventHandler(object sender, getFutureEventCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFutureEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFutureEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void updateMomgoCalendarCompletedEventHandler(object sender, updateMomgoCalendarCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateMomgoCalendarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateMomgoCalendarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void updateGarminDataCompletedEventHandler(object sender, updateGarminDataCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateGarminDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateGarminDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public bool updateGarminDataResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// CodeRemarks
        public bool updateGarminDataResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getGraphDataCompletedEventHandler(object sender, getGraphDataCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getGraphDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getGraphDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void athCurrDataMongoCompletedEventHandler(object sender, athCurrDataMongoCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class athCurrDataMongoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal athCurrDataMongoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getAthNameByIdCompletedEventHandler(object sender, getAthNameByIdCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAthNameByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAthNameByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void GetDataUsingDataContractCompletedEventHandler(object sender, GetDataUsingDataContractCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataUsingDataContractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataUsingDataContractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public CompositeType Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CompositeType)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void deleteMarkerCompletedEventHandler(object sender, deleteMarkerCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteMarkerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteMarkerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void addMarkerCompletedEventHandler(object sender, addMarkerCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addMarkerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addMarkerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void validateNickNameCompletedEventHandler(object sender, validateNickNameCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class validateNickNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal validateNickNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getAllMarkersByIdCompletedEventHandler(object sender, getAllMarkersByIdCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllMarkersByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllMarkersByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void createEventCompletedEventHandler(object sender, createEventCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class createEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal createEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void updateEventCompletedEventHandler(object sender, updateEventCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void deleteEventCompletedEventHandler(object sender, deleteEventCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getEventIdByNameCompletedEventHandler(object sender, getEventIdByNameCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEventIdByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEventIdByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getEventIdByNameForMarkersCompletedEventHandler(object sender, getEventIdByNameForMarkersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEventIdByNameForMarkersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEventIdByNameForMarkersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getcurrentEventByDateCompletedEventHandler(object sender, getcurrentEventByDateCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getcurrentEventByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getcurrentEventByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getEventNameByIdCompletedEventHandler(object sender, getEventNameByIdCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEventNameByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEventNameByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getErrprFromMobileCompletedEventHandler(object sender, getErrprFromMobileCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getErrprFromMobileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getErrprFromMobileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public bool getErrprFromMobileResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// CodeRemarks
        public bool getErrprFromMobileResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getEventMobCompletedEventHandler(object sender, getEventMobCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEventMobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEventMobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void updatePracticeCompletedEventHandler(object sender, updatePracticeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updatePracticeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updatePracticeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void insertNewProgramCompletedEventHandler(object sender, insertNewProgramCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class insertNewProgramCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal insertNewProgramCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void populateProgramCompletedEventHandler(object sender, populateProgramCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class populateProgramCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal populateProgramCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public bool populateProgramResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// CodeRemarks
        public bool populateProgramResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void updateProgramsJsonCompletedEventHandler(object sender, updateProgramsJsonCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateProgramsJsonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateProgramsJsonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public bool updateProgramsJsonResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// CodeRemarks
        public bool updateProgramsJsonResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void athCurrDataByDeviceIdCompletedEventHandler(object sender, athCurrDataByDeviceIdCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class athCurrDataByDeviceIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal athCurrDataByDeviceIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getGaugeCompletedEventHandler(object sender, getGaugeCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getGaugeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getGaugeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public BsonElement[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BsonElement[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getGaugeMobCompletedEventHandler(object sender, getGaugeMobCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getGaugeMobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getGaugeMobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void checkProgramNameCompletedEventHandler(object sender, checkProgramNameCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkProgramNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkProgramNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getProgramCompletedEventHandler(object sender, getProgramCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getProgramCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getProgramCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void saveUserImageCompletedEventHandler(object sender, saveUserImageCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class saveUserImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal saveUserImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void deleteProgramCompletedEventHandler(object sender, deleteProgramCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteProgramCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteProgramCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getListedDeviceIdCompletedEventHandler(object sender, getListedDeviceIdCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getListedDeviceIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getListedDeviceIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void attendReportCompletedEventHandler(object sender, attendReportCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class attendReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal attendReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void programsListCompletedEventHandler(object sender, programsListCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class programsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal programsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void eventsListCompletedEventHandler(object sender, eventsListCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class eventsListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal eventsListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void insertNewDeviceCompletedEventHandler(object sender, insertNewDeviceCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class insertNewDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal insertNewDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void validateUserCompletedEventHandler(object sender, validateUserCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class validateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal validateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void sessionUserCompletedEventHandler(object sender, sessionUserCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sessionUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sessionUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getStartMarkerPositionCompletedEventHandler(object sender, getStartMarkerPositionCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getStartMarkerPositionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getStartMarkerPositionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getEventDateNameIdCompletedEventHandler(object sender, getEventDateNameIdCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEventDateNameIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEventDateNameIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void groupResultsMongoCompletedEventHandler(object sender, groupResultsMongoCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class groupResultsMongoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal groupResultsMongoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getPerformanceFordateCompletedEventHandler(object sender, getPerformanceFordateCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPerformanceFordateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPerformanceFordateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getMyTrailForEventMongoCompletedEventHandler(object sender, getMyTrailForEventMongoCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getMyTrailForEventMongoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getMyTrailForEventMongoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[][])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getAthDataByDeviceIdCompletedEventHandler(object sender, getAthDataByDeviceIdCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAthDataByDeviceIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAthDataByDeviceIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getUserCalendarCompletedEventHandler(object sender, getUserCalendarCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserCalendarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserCalendarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void updateUserDataJsonCompletedEventHandler(object sender, updateUserDataJsonCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateUserDataJsonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateUserDataJsonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getUserCalendarFutureCompletedEventHandler(object sender, getUserCalendarFutureCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserCalendarFutureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserCalendarFutureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getUserCalendarPastCompletedEventHandler(object sender, getUserCalendarPastCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserCalendarPastCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserCalendarPastCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void setCommentsCompletedEventHandler(object sender, setCommentsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setCommentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setCommentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void setCommentsCoachCompletedEventHandler(object sender, setCommentsCoachCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class setCommentsCoachCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal setCommentsCoachCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getUsrObjectCompletedEventHandler(object sender, getUsrObjectCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUsrObjectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUsrObjectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getUserPmcCompletedEventHandler(object sender, getUserPmcCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserPmcCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserPmcCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getGaugesForMonthCompletedEventHandler(object sender, getGaugesForMonthCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getGaugesForMonthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getGaugesForMonthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void insertCompUserKeyCompletedEventHandler(object sender, insertCompUserKeyCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class insertCompUserKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal insertCompUserKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void syncSuuntoCompletedEventHandler(object sender, syncSuuntoCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class syncSuuntoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal syncSuuntoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public bool syncSuuntoResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// CodeRemarks
        public bool syncSuuntoResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getPrcticeListCompletedEventHandler(object sender, getPrcticeListCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPrcticeListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPrcticeListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getUserCalendarTodayCompletedEventHandler(object sender, getUserCalendarTodayCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUserCalendarTodayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUserCalendarTodayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void updateSubGroupNameCompletedEventHandler(object sender, updateSubGroupNameCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateSubGroupNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateSubGroupNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getUsrLoginDataCompletedEventHandler(object sender, getUsrLoginDataCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUsrLoginDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUsrLoginDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void resetCalendarEventCompletedEventHandler(object sender, resetCalendarEventCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class resetCalendarEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal resetCalendarEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public bool resetCalendarEventResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// CodeRemarks
        public bool resetCalendarEventResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getEventGraphCompletedEventHandler(object sender, getEventGraphCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEventGraphCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEventGraphCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getNearestEventMakersCompletedEventHandler(object sender, getNearestEventMakersCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNearestEventMakersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNearestEventMakersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void athDataCompletedEventHandler(object sender, athDataCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class athDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal athDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void removeMultiFromGroupCompletedEventHandler(object sender, removeMultiFromGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeMultiFromGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeMultiFromGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public bool removeMultiFromGroupResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// CodeRemarks
        public bool removeMultiFromGroupResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getCommentsCompletedEventHandler(object sender, getCommentsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCommentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCommentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void fieldAthletsAndEvenetsCompletedEventHandler(object sender, fieldAthletsAndEvenetsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class fieldAthletsAndEvenetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal fieldAthletsAndEvenetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void updateMomgoGroupsCompletedEventHandler(object sender, updateMomgoGroupsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateMomgoGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateMomgoGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void removeAthFromGroupCompletedEventHandler(object sender, removeAthFromGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeAthFromGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeAthFromGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public bool removeAthFromGroupResult {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// CodeRemarks
        public bool removeAthFromGroupResultSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void removeFromGroupCompletedEventHandler(object sender, removeFromGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class removeFromGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal removeFromGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getIyemsForGroupCompletedEventHandler(object sender, getIyemsForGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getIyemsForGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getIyemsForGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void replaceUtilCompletedEventHandler(object sender, replaceUtilCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class replaceUtilCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal replaceUtilCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getPmcCompletedEventHandler(object sender, getPmcCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPmcCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPmcCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getAllathForGroupCompletedEventHandler(object sender, getAllathForGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getAllathForGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getAllathForGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getBestResultsCompletedEventHandler(object sender, getBestResultsCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getBestResultsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getBestResultsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getNearestEventCompletedEventHandler(object sender, getNearestEventCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNearestEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNearestEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public BsonElement[][] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BsonElement[][])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getBestResultsForAthCompletedEventHandler(object sender, getBestResultsForAthCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getBestResultsForAthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getBestResultsForAthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void updateMeberNotesCompletedEventHandler(object sender, updateMeberNotesCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateMeberNotesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateMeberNotesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getNotesMobCompletedEventHandler(object sender, getNotesMobCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getNotesMobCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getNotesMobCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getEventInfoCompletedEventHandler(object sender, getEventInfoCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getEventInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getEventInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void addSyncCompletedEventHandler(object sender, addSyncCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class addSyncCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal addSyncCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void validatSyncCompletedEventHandler(object sender, validatSyncCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class validatSyncCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal validatSyncCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void getUsrGroupCompletedEventHandler(object sender, getUsrGroupCompletedEventArgs e);
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getUsrGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getUsrGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// CodeRemarks
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// CodeRemarks
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XamarinStudio", "4.0.0.0")]
    public delegate void updateAthPersonalDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
