// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace goheja.go_heja.com {
    
}


[System.ServiceModel.ServiceContractAttribute(Namespace="goheja.go_heja.com", ConfigurationName="IService1")]
public interface IService1 {
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateMomgoData", ReplyAction="http://tempuri.org/IService1/updateMomgoDataResponse")]
    void updateMomgoData(string name, string loc, System.DateTime time, string deviceID, float speed, int id, string country, float dist, float alt, float bearing);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateMomgoData", ReplyAction="http://tempuri.org/IService1/updateMomgoDataResponse", AsyncPattern=true)]
    System.IAsyncResult BeginupdateMomgoData(string name, string loc, System.DateTime time, string deviceID, float speed, int id, string country, float dist, float alt, float bearing, System.AsyncCallback asyncCallback, object userState);
    
    void EndupdateMomgoData(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateMomgoCalendar", ReplyAction="http://tempuri.org/IService1/updateMomgoCalendarResponse")]
    void updateMomgoCalendar(string eventName, string startTime, string endTime, string userId, string eventData, string eventTotal, string type);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateMomgoCalendar", ReplyAction="http://tempuri.org/IService1/updateMomgoCalendarResponse", AsyncPattern=true)]
    System.IAsyncResult BeginupdateMomgoCalendar(string eventName, string startTime, string endTime, string userId, string eventData, string eventTotal, string type, System.AsyncCallback asyncCallback, object userState);
    
    void EndupdateMomgoCalendar(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/athCurrData", ReplyAction="http://tempuri.org/IService1/athCurrDataResponse")]
    string[] athCurrData(int athId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/athCurrData", ReplyAction="http://tempuri.org/IService1/athCurrDataResponse", AsyncPattern=true)]
    System.IAsyncResult BeginathCurrData(int athId, System.AsyncCallback asyncCallback, object userState);
    
    string[] EndathCurrData(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/athCurrDataMongo", ReplyAction="http://tempuri.org/IService1/athCurrDataMongoResponse")]
    string[] athCurrDataMongo(int athId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/athCurrDataMongo", ReplyAction="http://tempuri.org/IService1/athCurrDataMongoResponse", AsyncPattern=true)]
    System.IAsyncResult BeginathCurrDataMongo(int athId, System.AsyncCallback asyncCallback, object userState);
    
    string[] EndathCurrDataMongo(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAthNameById", ReplyAction="http://tempuri.org/IService1/getAthNameByIdResponse")]
    string getAthNameById(int athId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAthNameById", ReplyAction="http://tempuri.org/IService1/getAthNameByIdResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetAthNameById(int athId, System.AsyncCallback asyncCallback, object userState);
    
    string EndgetAthNameById(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
    tempuri.org.composite GetDataUsingDataContract(tempuri.org.composite composite);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse", AsyncPattern=true)]
    System.IAsyncResult BeginGetDataUsingDataContract(tempuri.org.composite composite, System.AsyncCallback asyncCallback, object userState);
    
    tempuri.org.composite EndGetDataUsingDataContract(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/deleteMarker", ReplyAction="http://tempuri.org/IService1/deleteMarkerResponse")]
    string deleteMarker(string mLat, string mLng);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/deleteMarker", ReplyAction="http://tempuri.org/IService1/deleteMarkerResponse", AsyncPattern=true)]
    System.IAsyncResult BegindeleteMarker(string mLat, string mLng, System.AsyncCallback asyncCallback, object userState);
    
    string EnddeleteMarker(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addMarker", ReplyAction="http://tempuri.org/IService1/addMarkerResponse")]
    string addMarker(string name, string description, string mLat, string mLng, string type, int eventid, string imagePath, string interval);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addMarker", ReplyAction="http://tempuri.org/IService1/addMarkerResponse", AsyncPattern=true)]
    System.IAsyncResult BeginaddMarker(string name, string description, string mLat, string mLng, string type, int eventid, string imagePath, string interval, System.AsyncCallback asyncCallback, object userState);
    
    string EndaddMarker(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllMarkersById", ReplyAction="http://tempuri.org/IService1/getAllMarkersByIdResponse")]
    string[][] getAllMarkersById(string Id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllMarkersById", ReplyAction="http://tempuri.org/IService1/getAllMarkersByIdResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetAllMarkersById(string Id, System.AsyncCallback asyncCallback, object userState);
    
    string[][] EndgetAllMarkersById(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/createEvent", ReplyAction="http://tempuri.org/IService1/createEventResponse")]
    string createEvent(string name, string time, string eventType, string generaldata, string dist);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/createEvent", ReplyAction="http://tempuri.org/IService1/createEventResponse", AsyncPattern=true)]
    System.IAsyncResult BegincreateEvent(string name, string time, string eventType, string generaldata, string dist, System.AsyncCallback asyncCallback, object userState);
    
    string EndcreateEvent(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getEventsNameAndId", ReplyAction="http://tempuri.org/IService1/getEventsNameAndIdResponse")]
    string[][] getEventsNameAndId();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getEventsNameAndId", ReplyAction="http://tempuri.org/IService1/getEventsNameAndIdResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetEventsNameAndId(System.AsyncCallback asyncCallback, object userState);
    
    string[][] EndgetEventsNameAndId(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getEventIdByName", ReplyAction="http://tempuri.org/IService1/getEventIdByNameResponse")]
    string getEventIdByName(string eventName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getEventIdByName", ReplyAction="http://tempuri.org/IService1/getEventIdByNameResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetEventIdByName(string eventName, System.AsyncCallback asyncCallback, object userState);
    
    string EndgetEventIdByName(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getcurrentEventByDate", ReplyAction="http://tempuri.org/IService1/getcurrentEventByDateResponse")]
    string getcurrentEventByDate();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getcurrentEventByDate", ReplyAction="http://tempuri.org/IService1/getcurrentEventByDateResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetcurrentEventByDate(System.AsyncCallback asyncCallback, object userState);
    
    string EndgetcurrentEventByDate(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getEventNameById", ReplyAction="http://tempuri.org/IService1/getEventNameByIdResponse")]
    string getEventNameById(string eventId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getEventNameById", ReplyAction="http://tempuri.org/IService1/getEventNameByIdResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetEventNameById(string eventId, System.AsyncCallback asyncCallback, object userState);
    
    string EndgetEventNameById(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getEventNameByType", ReplyAction="http://tempuri.org/IService1/getEventNameByTypeResponse")]
    string[] getEventNameByType(string typeName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getEventNameByType", ReplyAction="http://tempuri.org/IService1/getEventNameByTypeResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetEventNameByType(string typeName, System.AsyncCallback asyncCallback, object userState);
    
    string[] EndgetEventNameByType(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAthcurrentLocation", ReplyAction="http://tempuri.org/IService1/getAthcurrentLocationResponse")]
    string getAthcurrentLocation(int athId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAthcurrentLocation", ReplyAction="http://tempuri.org/IService1/getAthcurrentLocationResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetAthcurrentLocation(int athId, System.AsyncCallback asyncCallback, object userState);
    
    string EndgetAthcurrentLocation(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getListedDeviceId", ReplyAction="http://tempuri.org/IService1/getListedDeviceIdResponse")]
    string getListedDeviceId(string deviceId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getListedDeviceId", ReplyAction="http://tempuri.org/IService1/getListedDeviceIdResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetListedDeviceId(string deviceId, System.AsyncCallback asyncCallback, object userState);
    
    string EndgetListedDeviceId(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/insertNewDevice", ReplyAction="http://tempuri.org/IService1/insertNewDeviceResponse")]
    void insertNewDevice(string fName, string Lname, string deviceId, string userName, string psw);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/insertNewDevice", ReplyAction="http://tempuri.org/IService1/insertNewDeviceResponse", AsyncPattern=true)]
    System.IAsyncResult BegininsertNewDevice(string fName, string Lname, string deviceId, string userName, string psw, System.AsyncCallback asyncCallback, object userState);
    
    void EndinsertNewDevice(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/validateUser", ReplyAction="http://tempuri.org/IService1/validateUserResponse")]
    string validateUser(string usr, string psw);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/validateUser", ReplyAction="http://tempuri.org/IService1/validateUserResponse", AsyncPattern=true)]
    System.IAsyncResult BeginvalidateUser(string usr, string psw, System.AsyncCallback asyncCallback, object userState);
    
    string EndvalidateUser(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/sessionUser", ReplyAction="http://tempuri.org/IService1/sessionUserResponse")]
    string sessionUser(string usr);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/sessionUser", ReplyAction="http://tempuri.org/IService1/sessionUserResponse", AsyncPattern=true)]
    System.IAsyncResult BeginsessionUser(string usr, System.AsyncCallback asyncCallback, object userState);
    
    string EndsessionUser(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getStartMarkerPosition", ReplyAction="http://tempuri.org/IService1/getStartMarkerPositionResponse")]
    string getStartMarkerPosition(string eventId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getStartMarkerPosition", ReplyAction="http://tempuri.org/IService1/getStartMarkerPositionResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetStartMarkerPosition(string eventId, System.AsyncCallback asyncCallback, object userState);
    
    string EndgetStartMarkerPosition(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/insertDebugMarker", ReplyAction="http://tempuri.org/IService1/insertDebugMarkerResponse")]
    void insertDebugMarker(string marker_name, int interval, float lat, float lng, string type, string img, int eventid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/insertDebugMarker", ReplyAction="http://tempuri.org/IService1/insertDebugMarkerResponse", AsyncPattern=true)]
    System.IAsyncResult BegininsertDebugMarker(string marker_name, int interval, float lat, float lng, string type, string img, int eventid, System.AsyncCallback asyncCallback, object userState);
    
    void EndinsertDebugMarker(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUsrId", ReplyAction="http://tempuri.org/IService1/getUsrIdResponse")]
    string getUsrId(string usr, string psw);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUsrId", ReplyAction="http://tempuri.org/IService1/getUsrIdResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetUsrId(string usr, string psw, System.AsyncCallback asyncCallback, object userState);
    
    string EndgetUsrId(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAthcurrentLocationMongo", ReplyAction="http://tempuri.org/IService1/getAthcurrentLocationMongoResponse")]
    string getAthcurrentLocationMongo(int athId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAthcurrentLocationMongo", ReplyAction="http://tempuri.org/IService1/getAthcurrentLocationMongoResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetAthcurrentLocationMongo(int athId, System.AsyncCallback asyncCallback, object userState);
    
    string EndgetAthcurrentLocationMongo(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/myResults", ReplyAction="http://tempuri.org/IService1/myResultsResponse")]
    string[][] myResults(int athId, string eventId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/myResults", ReplyAction="http://tempuri.org/IService1/myResultsResponse", AsyncPattern=true)]
    System.IAsyncResult BeginmyResults(int athId, string eventId, System.AsyncCallback asyncCallback, object userState);
    
    string[][] EndmyResults(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getEventDateNameId", ReplyAction="http://tempuri.org/IService1/getEventDateNameIdResponse")]
    string getEventDateNameId(int eventId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getEventDateNameId", ReplyAction="http://tempuri.org/IService1/getEventDateNameIdResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetEventDateNameId(int eventId, System.AsyncCallback asyncCallback, object userState);
    
    string EndgetEventDateNameId(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/groupResultsMongo", ReplyAction="http://tempuri.org/IService1/groupResultsMongoResponse")]
    string[][] groupResultsMongo(string eventId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/groupResultsMongo", ReplyAction="http://tempuri.org/IService1/groupResultsMongoResponse", AsyncPattern=true)]
    System.IAsyncResult BegingroupResultsMongo(string eventId, System.AsyncCallback asyncCallback, object userState);
    
    string[][] EndgroupResultsMongo(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getMyTrailForEventMongo", ReplyAction="http://tempuri.org/IService1/getMyTrailForEventMongoResponse")]
    string[][] getMyTrailForEventMongo(int athId, string eventId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getMyTrailForEventMongo", ReplyAction="http://tempuri.org/IService1/getMyTrailForEventMongoResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetMyTrailForEventMongo(int athId, string eventId, System.AsyncCallback asyncCallback, object userState);
    
    string[][] EndgetMyTrailForEventMongo(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAthDataByDeviceId", ReplyAction="http://tempuri.org/IService1/getAthDataByDeviceIdResponse")]
    string[] getAthDataByDeviceId(string deviceId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAthDataByDeviceId", ReplyAction="http://tempuri.org/IService1/getAthDataByDeviceIdResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetAthDataByDeviceId(string deviceId, System.AsyncCallback asyncCallback, object userState);
    
    string[] EndgetAthDataByDeviceId(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUserCalendar", ReplyAction="http://tempuri.org/IService1/getUserCalendarResponse")]
    string getUserCalendar(string athId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUserCalendar", ReplyAction="http://tempuri.org/IService1/getUserCalendarResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetUserCalendar(string athId, System.AsyncCallback asyncCallback, object userState);
    
    string EndgetUserCalendar(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/resetCalendarEvent", ReplyAction="http://tempuri.org/IService1/resetCalendarEventResponse")]
    void resetCalendarEvent(string startDate, string endDate, string eventId, string userId, string opType);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/resetCalendarEvent", ReplyAction="http://tempuri.org/IService1/resetCalendarEventResponse", AsyncPattern=true)]
    System.IAsyncResult BeginresetCalendarEvent(string startDate, string endDate, string eventId, string userId, string opType, System.AsyncCallback asyncCallback, object userState);
    
    void EndresetCalendarEvent(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateMomgoGroups", ReplyAction="http://tempuri.org/IService1/updateMomgoGroupsResponse")]
    string updateMomgoGroups(string groupName, int groupid, string userNickName, string userUrl, string userImg);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateMomgoGroups", ReplyAction="http://tempuri.org/IService1/updateMomgoGroupsResponse", AsyncPattern=true)]
    System.IAsyncResult BeginupdateMomgoGroups(string groupName, int groupid, string userNickName, string userUrl, string userImg, System.AsyncCallback asyncCallback, object userState);
    
    string EndupdateMomgoGroups(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/removeFromGroup", ReplyAction="http://tempuri.org/IService1/removeFromGroupResponse")]
    string removeFromGroup(int groupid, string userNickName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/removeFromGroup", ReplyAction="http://tempuri.org/IService1/removeFromGroupResponse", AsyncPattern=true)]
    System.IAsyncResult BeginremoveFromGroup(int groupid, string userNickName, System.AsyncCallback asyncCallback, object userState);
    
    string EndremoveFromGroup(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllUsersForGroupManage", ReplyAction="http://tempuri.org/IService1/getAllUsersForGroupManageResponse")]
    string getAllUsersForGroupManage(string dim);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllUsersForGroupManage", ReplyAction="http://tempuri.org/IService1/getAllUsersForGroupManageResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetAllUsersForGroupManage(string dim, System.AsyncCallback asyncCallback, object userState);
    
    string EndgetAllUsersForGroupManage(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getIyemsForGroup", ReplyAction="http://tempuri.org/IService1/getIyemsForGroupResponse")]
    string getIyemsForGroup(int groupId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getIyemsForGroup", ReplyAction="http://tempuri.org/IService1/getIyemsForGroupResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetIyemsForGroup(int groupId, System.AsyncCallback asyncCallback, object userState);
    
    string EndgetIyemsForGroup(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllathForGroup", ReplyAction="http://tempuri.org/IService1/getAllathForGroupResponse")]
    string[] getAllathForGroup(int groupId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllathForGroup", ReplyAction="http://tempuri.org/IService1/getAllathForGroupResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetAllathForGroup(int groupId, System.AsyncCallback asyncCallback, object userState);
    
    string[] EndgetAllathForGroup(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getNearestEvent", ReplyAction="http://tempuri.org/IService1/getNearestEventResponse")]
    MongoDB.Bson.BsonElement[][] getNearestEvent(string athId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getNearestEvent", ReplyAction="http://tempuri.org/IService1/getNearestEventResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetNearestEvent(string athId, System.AsyncCallback asyncCallback, object userState);
    
    MongoDB.Bson.BsonElement[][] EndgetNearestEvent(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateCoachNotes", ReplyAction="http://tempuri.org/IService1/updateCoachNotesResponse")]
    MongoDB.Bson.BsonElement[][] updateCoachNotes(string notes, string id, string group, string genData, string totalDist);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateCoachNotes", ReplyAction="http://tempuri.org/IService1/updateCoachNotesResponse", AsyncPattern=true)]
    System.IAsyncResult BeginupdateCoachNotes(string notes, string id, string group, string genData, string totalDist, System.AsyncCallback asyncCallback, object userState);
    
    MongoDB.Bson.BsonElement[][] EndupdateCoachNotes(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getNotes", ReplyAction="http://tempuri.org/IService1/getNotesResponse")]
    string getNotes(string id, string group);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getNotes", ReplyAction="http://tempuri.org/IService1/getNotesResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetNotes(string id, string group, System.AsyncCallback asyncCallback, object userState);
    
    string EndgetNotes(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUsrNickName", ReplyAction="http://tempuri.org/IService1/getUsrNickNameResponse")]
    string getUsrNickName(string usr, string psw);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUsrNickName", ReplyAction="http://tempuri.org/IService1/getUsrNickNameResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetUsrNickName(string usr, string psw, System.AsyncCallback asyncCallback, object userState);
    
    string EndgetUsrNickName(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllIdsForNames", ReplyAction="http://tempuri.org/IService1/getAllIdsForNamesResponse")]
    string getAllIdsForNames(string names);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllIdsForNames", ReplyAction="http://tempuri.org/IService1/getAllIdsForNamesResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetAllIdsForNames(string names, System.AsyncCallback asyncCallback, object userState);
    
    string EndgetAllIdsForNames(System.IAsyncResult result);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getEventInfo", ReplyAction="http://tempuri.org/IService1/getEventInfoResponse")]
    string[] getEventInfo(string eventName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getEventInfo", ReplyAction="http://tempuri.org/IService1/getEventInfoResponse", AsyncPattern=true)]
    System.IAsyncResult BegingetEventInfo(string eventName, System.AsyncCallback asyncCallback, object userState);
    
    string[] EndgetEventInfo(System.IAsyncResult result);
}

public interface IService1Channel : IService1, System.ServiceModel.IClientChannel {
}

public class Service1Client : System.ServiceModel.ClientBase<IService1>, IService1 {
    
    public Service1Client() {
    }
    
    public Service1Client(string endpointConfigurationName) : 
            base(endpointConfigurationName) {
    }
    
    public Service1Client(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress) {
    }
    
    public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress) {
    }
    
    public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress endpoint) : 
            base(binding, endpoint) {
    }
    
    public void updateMomgoData(string name, string loc, System.DateTime time, string deviceID, float speed, int id, string country, float dist, float alt, float bearing) {
        base.Channel.updateMomgoData(name, loc, time, deviceID, speed, id, country, dist, alt, bearing);
    }
    
    public System.IAsyncResult BeginupdateMomgoData(string name, string loc, System.DateTime time, string deviceID, float speed, int id, string country, float dist, float alt, float bearing, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginupdateMomgoData(name, loc, time, deviceID, speed, id, country, dist, alt, bearing, asyncCallback, userState);
    }
    
    public void EndupdateMomgoData(System.IAsyncResult result) {
        base.Channel.EndupdateMomgoData(result);
    }
    
    public void updateMomgoCalendar(string eventName, string startTime, string endTime, string userId, string eventData, string eventTotal, string type) {
        base.Channel.updateMomgoCalendar(eventName, startTime, endTime, userId, eventData, eventTotal, type);
    }
    
    public System.IAsyncResult BeginupdateMomgoCalendar(string eventName, string startTime, string endTime, string userId, string eventData, string eventTotal, string type, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginupdateMomgoCalendar(eventName, startTime, endTime, userId, eventData, eventTotal, type, asyncCallback, userState);
    }
    
    public void EndupdateMomgoCalendar(System.IAsyncResult result) {
        base.Channel.EndupdateMomgoCalendar(result);
    }
    
    public string[] athCurrData(int athId) {
        return base.Channel.athCurrData(athId);
    }
    
    public System.IAsyncResult BeginathCurrData(int athId, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginathCurrData(athId, asyncCallback, userState);
    }
    
    public string[] EndathCurrData(System.IAsyncResult result) {
        return base.Channel.EndathCurrData(result);
    }
    
    public string[] athCurrDataMongo(int athId) {
        return base.Channel.athCurrDataMongo(athId);
    }
    
    public System.IAsyncResult BeginathCurrDataMongo(int athId, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginathCurrDataMongo(athId, asyncCallback, userState);
    }
    
    public string[] EndathCurrDataMongo(System.IAsyncResult result) {
        return base.Channel.EndathCurrDataMongo(result);
    }
    
    public string getAthNameById(int athId) {
        return base.Channel.getAthNameById(athId);
    }
    
    public System.IAsyncResult BegingetAthNameById(int athId, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetAthNameById(athId, asyncCallback, userState);
    }
    
    public string EndgetAthNameById(System.IAsyncResult result) {
        return base.Channel.EndgetAthNameById(result);
    }
    
    public tempuri.org.composite GetDataUsingDataContract(tempuri.org.composite composite) {
        return base.Channel.GetDataUsingDataContract(composite);
    }
    
    public System.IAsyncResult BeginGetDataUsingDataContract(tempuri.org.composite composite, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginGetDataUsingDataContract(composite, asyncCallback, userState);
    }
    
    public tempuri.org.composite EndGetDataUsingDataContract(System.IAsyncResult result) {
        return base.Channel.EndGetDataUsingDataContract(result);
    }
    
    public string deleteMarker(string mLat, string mLng) {
        return base.Channel.deleteMarker(mLat, mLng);
    }
    
    public System.IAsyncResult BegindeleteMarker(string mLat, string mLng, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegindeleteMarker(mLat, mLng, asyncCallback, userState);
    }
    
    public string EnddeleteMarker(System.IAsyncResult result) {
        return base.Channel.EnddeleteMarker(result);
    }
    
    public string addMarker(string name, string description, string mLat, string mLng, string type, int eventid, string imagePath, string interval) {
        return base.Channel.addMarker(name, description, mLat, mLng, type, eventid, imagePath, interval);
    }
    
    public System.IAsyncResult BeginaddMarker(string name, string description, string mLat, string mLng, string type, int eventid, string imagePath, string interval, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginaddMarker(name, description, mLat, mLng, type, eventid, imagePath, interval, asyncCallback, userState);
    }
    
    public string EndaddMarker(System.IAsyncResult result) {
        return base.Channel.EndaddMarker(result);
    }
    
    public string[][] getAllMarkersById(string Id) {
        return base.Channel.getAllMarkersById(Id);
    }
    
    public System.IAsyncResult BegingetAllMarkersById(string Id, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetAllMarkersById(Id, asyncCallback, userState);
    }
    
    public string[][] EndgetAllMarkersById(System.IAsyncResult result) {
        return base.Channel.EndgetAllMarkersById(result);
    }
    
    public string createEvent(string name, string time, string eventType, string generaldata, string dist) {
        return base.Channel.createEvent(name, time, eventType, generaldata, dist);
    }
    
    public System.IAsyncResult BegincreateEvent(string name, string time, string eventType, string generaldata, string dist, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegincreateEvent(name, time, eventType, generaldata, dist, asyncCallback, userState);
    }
    
    public string EndcreateEvent(System.IAsyncResult result) {
        return base.Channel.EndcreateEvent(result);
    }
    
    public string[][] getEventsNameAndId() {
        return base.Channel.getEventsNameAndId();
    }
    
    public System.IAsyncResult BegingetEventsNameAndId(System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetEventsNameAndId(asyncCallback, userState);
    }
    
    public string[][] EndgetEventsNameAndId(System.IAsyncResult result) {
        return base.Channel.EndgetEventsNameAndId(result);
    }
    
    public string getEventIdByName(string eventName) {
        return base.Channel.getEventIdByName(eventName);
    }
    
    public System.IAsyncResult BegingetEventIdByName(string eventName, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetEventIdByName(eventName, asyncCallback, userState);
    }
    
    public string EndgetEventIdByName(System.IAsyncResult result) {
        return base.Channel.EndgetEventIdByName(result);
    }
    
    public string getcurrentEventByDate() {
        return base.Channel.getcurrentEventByDate();
    }
    
    public System.IAsyncResult BegingetcurrentEventByDate(System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetcurrentEventByDate(asyncCallback, userState);
    }
    
    public string EndgetcurrentEventByDate(System.IAsyncResult result) {
        return base.Channel.EndgetcurrentEventByDate(result);
    }
    
    public string getEventNameById(string eventId) {
        return base.Channel.getEventNameById(eventId);
    }
    
    public System.IAsyncResult BegingetEventNameById(string eventId, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetEventNameById(eventId, asyncCallback, userState);
    }
    
    public string EndgetEventNameById(System.IAsyncResult result) {
        return base.Channel.EndgetEventNameById(result);
    }
    
    public string[] getEventNameByType(string typeName) {
        return base.Channel.getEventNameByType(typeName);
    }
    
    public System.IAsyncResult BegingetEventNameByType(string typeName, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetEventNameByType(typeName, asyncCallback, userState);
    }
    
    public string[] EndgetEventNameByType(System.IAsyncResult result) {
        return base.Channel.EndgetEventNameByType(result);
    }
    
    public string getAthcurrentLocation(int athId) {
        return base.Channel.getAthcurrentLocation(athId);
    }
    
    public System.IAsyncResult BegingetAthcurrentLocation(int athId, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetAthcurrentLocation(athId, asyncCallback, userState);
    }
    
    public string EndgetAthcurrentLocation(System.IAsyncResult result) {
        return base.Channel.EndgetAthcurrentLocation(result);
    }
    
    public string getListedDeviceId(string deviceId) {
        return base.Channel.getListedDeviceId(deviceId);
    }
    
    public System.IAsyncResult BegingetListedDeviceId(string deviceId, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetListedDeviceId(deviceId, asyncCallback, userState);
    }
    
    public string EndgetListedDeviceId(System.IAsyncResult result) {
        return base.Channel.EndgetListedDeviceId(result);
    }
    
    public void insertNewDevice(string fName, string Lname, string deviceId, string userName, string psw) {
        base.Channel.insertNewDevice(fName, Lname, deviceId, userName, psw);
    }
    
    public System.IAsyncResult BegininsertNewDevice(string fName, string Lname, string deviceId, string userName, string psw, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegininsertNewDevice(fName, Lname, deviceId, userName, psw, asyncCallback, userState);
    }
    
    public void EndinsertNewDevice(System.IAsyncResult result) {
        base.Channel.EndinsertNewDevice(result);
    }
    
    public string validateUser(string usr, string psw) {
        return base.Channel.validateUser(usr, psw);
    }
    
    public System.IAsyncResult BeginvalidateUser(string usr, string psw, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginvalidateUser(usr, psw, asyncCallback, userState);
    }
    
    public string EndvalidateUser(System.IAsyncResult result) {
        return base.Channel.EndvalidateUser(result);
    }
    
    public string sessionUser(string usr) {
        return base.Channel.sessionUser(usr);
    }
    
    public System.IAsyncResult BeginsessionUser(string usr, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginsessionUser(usr, asyncCallback, userState);
    }
    
    public string EndsessionUser(System.IAsyncResult result) {
        return base.Channel.EndsessionUser(result);
    }
    
    public string getStartMarkerPosition(string eventId) {
        return base.Channel.getStartMarkerPosition(eventId);
    }
    
    public System.IAsyncResult BegingetStartMarkerPosition(string eventId, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetStartMarkerPosition(eventId, asyncCallback, userState);
    }
    
    public string EndgetStartMarkerPosition(System.IAsyncResult result) {
        return base.Channel.EndgetStartMarkerPosition(result);
    }
    
    public void insertDebugMarker(string marker_name, int interval, float lat, float lng, string type, string img, int eventid) {
        base.Channel.insertDebugMarker(marker_name, interval, lat, lng, type, img, eventid);
    }
    
    public System.IAsyncResult BegininsertDebugMarker(string marker_name, int interval, float lat, float lng, string type, string img, int eventid, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegininsertDebugMarker(marker_name, interval, lat, lng, type, img, eventid, asyncCallback, userState);
    }
    
    public void EndinsertDebugMarker(System.IAsyncResult result) {
        base.Channel.EndinsertDebugMarker(result);
    }
    
    public string getUsrId(string usr, string psw) {
        return base.Channel.getUsrId(usr, psw);
    }
    
    public System.IAsyncResult BegingetUsrId(string usr, string psw, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetUsrId(usr, psw, asyncCallback, userState);
    }
    
    public string EndgetUsrId(System.IAsyncResult result) {
        return base.Channel.EndgetUsrId(result);
    }
    
    public string getAthcurrentLocationMongo(int athId) {
        return base.Channel.getAthcurrentLocationMongo(athId);
    }
    
    public System.IAsyncResult BegingetAthcurrentLocationMongo(int athId, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetAthcurrentLocationMongo(athId, asyncCallback, userState);
    }
    
    public string EndgetAthcurrentLocationMongo(System.IAsyncResult result) {
        return base.Channel.EndgetAthcurrentLocationMongo(result);
    }
    
    public string[][] myResults(int athId, string eventId) {
        return base.Channel.myResults(athId, eventId);
    }
    
    public System.IAsyncResult BeginmyResults(int athId, string eventId, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginmyResults(athId, eventId, asyncCallback, userState);
    }
    
    public string[][] EndmyResults(System.IAsyncResult result) {
        return base.Channel.EndmyResults(result);
    }
    
    public string getEventDateNameId(int eventId) {
        return base.Channel.getEventDateNameId(eventId);
    }
    
    public System.IAsyncResult BegingetEventDateNameId(int eventId, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetEventDateNameId(eventId, asyncCallback, userState);
    }
    
    public string EndgetEventDateNameId(System.IAsyncResult result) {
        return base.Channel.EndgetEventDateNameId(result);
    }
    
    public string[][] groupResultsMongo(string eventId) {
        return base.Channel.groupResultsMongo(eventId);
    }
    
    public System.IAsyncResult BegingroupResultsMongo(string eventId, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingroupResultsMongo(eventId, asyncCallback, userState);
    }
    
    public string[][] EndgroupResultsMongo(System.IAsyncResult result) {
        return base.Channel.EndgroupResultsMongo(result);
    }
    
    public string[][] getMyTrailForEventMongo(int athId, string eventId) {
        return base.Channel.getMyTrailForEventMongo(athId, eventId);
    }
    
    public System.IAsyncResult BegingetMyTrailForEventMongo(int athId, string eventId, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetMyTrailForEventMongo(athId, eventId, asyncCallback, userState);
    }
    
    public string[][] EndgetMyTrailForEventMongo(System.IAsyncResult result) {
        return base.Channel.EndgetMyTrailForEventMongo(result);
    }
    
    public string[] getAthDataByDeviceId(string deviceId) {
        return base.Channel.getAthDataByDeviceId(deviceId);
    }
    
    public System.IAsyncResult BegingetAthDataByDeviceId(string deviceId, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetAthDataByDeviceId(deviceId, asyncCallback, userState);
    }
    
    public string[] EndgetAthDataByDeviceId(System.IAsyncResult result) {
        return base.Channel.EndgetAthDataByDeviceId(result);
    }
    
    public string getUserCalendar(string athId) {
        return base.Channel.getUserCalendar(athId);
    }
    
    public System.IAsyncResult BegingetUserCalendar(string athId, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetUserCalendar(athId, asyncCallback, userState);
    }
    
    public string EndgetUserCalendar(System.IAsyncResult result) {
        return base.Channel.EndgetUserCalendar(result);
    }
    
    public void resetCalendarEvent(string startDate, string endDate, string eventId, string userId, string opType) {
        base.Channel.resetCalendarEvent(startDate, endDate, eventId, userId, opType);
    }
    
    public System.IAsyncResult BeginresetCalendarEvent(string startDate, string endDate, string eventId, string userId, string opType, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginresetCalendarEvent(startDate, endDate, eventId, userId, opType, asyncCallback, userState);
    }
    
    public void EndresetCalendarEvent(System.IAsyncResult result) {
        base.Channel.EndresetCalendarEvent(result);
    }
    
    public string updateMomgoGroups(string groupName, int groupid, string userNickName, string userUrl, string userImg) {
        return base.Channel.updateMomgoGroups(groupName, groupid, userNickName, userUrl, userImg);
    }
    
    public System.IAsyncResult BeginupdateMomgoGroups(string groupName, int groupid, string userNickName, string userUrl, string userImg, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginupdateMomgoGroups(groupName, groupid, userNickName, userUrl, userImg, asyncCallback, userState);
    }
    
    public string EndupdateMomgoGroups(System.IAsyncResult result) {
        return base.Channel.EndupdateMomgoGroups(result);
    }
    
    public string removeFromGroup(int groupid, string userNickName) {
        return base.Channel.removeFromGroup(groupid, userNickName);
    }
    
    public System.IAsyncResult BeginremoveFromGroup(int groupid, string userNickName, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginremoveFromGroup(groupid, userNickName, asyncCallback, userState);
    }
    
    public string EndremoveFromGroup(System.IAsyncResult result) {
        return base.Channel.EndremoveFromGroup(result);
    }
    
    public string getAllUsersForGroupManage(string dim) {
        return base.Channel.getAllUsersForGroupManage(dim);
    }
    
    public System.IAsyncResult BegingetAllUsersForGroupManage(string dim, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetAllUsersForGroupManage(dim, asyncCallback, userState);
    }
    
    public string EndgetAllUsersForGroupManage(System.IAsyncResult result) {
        return base.Channel.EndgetAllUsersForGroupManage(result);
    }
    
    public string getIyemsForGroup(int groupId) {
        return base.Channel.getIyemsForGroup(groupId);
    }
    
    public System.IAsyncResult BegingetIyemsForGroup(int groupId, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetIyemsForGroup(groupId, asyncCallback, userState);
    }
    
    public string EndgetIyemsForGroup(System.IAsyncResult result) {
        return base.Channel.EndgetIyemsForGroup(result);
    }
    
    public string[] getAllathForGroup(int groupId) {
        return base.Channel.getAllathForGroup(groupId);
    }
    
    public System.IAsyncResult BegingetAllathForGroup(int groupId, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetAllathForGroup(groupId, asyncCallback, userState);
    }
    
    public string[] EndgetAllathForGroup(System.IAsyncResult result) {
        return base.Channel.EndgetAllathForGroup(result);
    }
    
    public MongoDB.Bson.BsonElement[][] getNearestEvent(string athId) {
        return base.Channel.getNearestEvent(athId);
    }
    
    public System.IAsyncResult BegingetNearestEvent(string athId, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetNearestEvent(athId, asyncCallback, userState);
    }
    
    public MongoDB.Bson.BsonElement[][] EndgetNearestEvent(System.IAsyncResult result) {
        return base.Channel.EndgetNearestEvent(result);
    }
    
    public MongoDB.Bson.BsonElement[][] updateCoachNotes(string notes, string id, string group, string genData, string totalDist) {
        return base.Channel.updateCoachNotes(notes, id, group, genData, totalDist);
    }
    
    public System.IAsyncResult BeginupdateCoachNotes(string notes, string id, string group, string genData, string totalDist, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BeginupdateCoachNotes(notes, id, group, genData, totalDist, asyncCallback, userState);
    }
    
    public MongoDB.Bson.BsonElement[][] EndupdateCoachNotes(System.IAsyncResult result) {
        return base.Channel.EndupdateCoachNotes(result);
    }
    
    public string getNotes(string id, string group) {
        return base.Channel.getNotes(id, group);
    }
    
    public System.IAsyncResult BegingetNotes(string id, string group, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetNotes(id, group, asyncCallback, userState);
    }
    
    public string EndgetNotes(System.IAsyncResult result) {
        return base.Channel.EndgetNotes(result);
    }
    
    public string getUsrNickName(string usr, string psw) {
        return base.Channel.getUsrNickName(usr, psw);
    }
    
    public System.IAsyncResult BegingetUsrNickName(string usr, string psw, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetUsrNickName(usr, psw, asyncCallback, userState);
    }
    
    public string EndgetUsrNickName(System.IAsyncResult result) {
        return base.Channel.EndgetUsrNickName(result);
    }
    
    public string getAllIdsForNames(string names) {
        return base.Channel.getAllIdsForNames(names);
    }
    
    public System.IAsyncResult BegingetAllIdsForNames(string names, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetAllIdsForNames(names, asyncCallback, userState);
    }
    
    public string EndgetAllIdsForNames(System.IAsyncResult result) {
        return base.Channel.EndgetAllIdsForNames(result);
    }
    
    public string[] getEventInfo(string eventName) {
        return base.Channel.getEventInfo(eventName);
    }
    
    public System.IAsyncResult BegingetEventInfo(string eventName, System.AsyncCallback asyncCallback, object userState) {
        return base.Channel.BegingetEventInfo(eventName, asyncCallback, userState);
    }
    
    public string[] EndgetEventInfo(System.IAsyncResult result) {
        return base.Channel.EndgetEventInfo(result);
    }
}
namespace tempuri.org {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/tracker_srv")]
    public partial class composite : System.Runtime.Serialization.IExtensibleDataObject {
        
        private bool BoolValueField;
        
        private string StringValueField;
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public virtual bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                this.BoolValueField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public virtual string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                this.StringValueField = value;
            }
        }
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
    }
}
namespace MongoDB.Bson {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BsonElement", Namespace="http://schemas.datacontract.org/2004/07/MongoDB.Bson")]
    public partial class BsonElement : System.Runtime.Serialization.IExtensibleDataObject {
        
        private string _nameField;
        
        private MongoDB.Bson.BsonValue _valueField;
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public virtual string _name {
            get {
                return this._nameField;
            }
            set {
                this._nameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public virtual MongoDB.Bson.BsonValue _value {
            get {
                return this._valueField;
            }
            set {
                this._valueField = value;
            }
        }
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BsonValue", Namespace="http://schemas.datacontract.org/2004/07/MongoDB.Bson")]
    public partial class BsonValue : System.Runtime.Serialization.IExtensibleDataObject {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
    }
}
