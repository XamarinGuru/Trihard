{"Name":"Firebase Cloud Messaging for iOS","Id":3414,"Alias":"firebaseioscloudmessaging","Description":"Using Firebase Cloud Messaging, you can notify a client app that new email or other data is available to sync. You can send notification messages to drive user reengagement and retention. For use cases such as instant messaging, a message can transfer a payload of up to 4KB to a client app.\n\n## Key capabilities\n\n* **Send notification messages or data messages:** Send notification messages that are displayed to your user. Or send data messages and determine completely what happens in your application code. See Message types.\n* **Versatile message targeting:** Distribute messages to your client app in any of three ways — to single devices, to groups of devices, or to devices subscribed to topics.\n* **Send messages from client apps:** Send acknowledgments, chats, and other messages from devices back to your server over FCM’s reliable and battery-efficient connection channel.\n\n## How does it work?\n\n\n\nA Firebase Cloud Messaging implementation includes an app server that interacts with FCM via HTTP or XMPP protocol, and a client app.\n\n\u003csub\u003e_Portions of this page are modifications based on work created and [shared by Google](https://developers.google.com/readme/policies/) and used according to terms described in the [Creative Commons 3.0 Attribution License](http://creativecommons.org/licenses/by/3.0/). Click [here](https://firebase.google.com/docs/cloud-messaging/) to see original Firebase documentation._\u003c/sub\u003e","Version":"1.2.1.3","Summary":"Firebase Cloud Messaging for iOS is a service that allows you to send data from your server to your iOS users.","QuickStart":"# Setting Up a Firebase Cloud Messaging Client App on iOS\n\nYou can implement Firebase Cloud Messaging in two complementary ways:\n\n* Receive basic push messages up to 2KB over the Firebase Cloud Messaging APNs interface.\n* Send messages upstream and/or receive downstream payloads up to 4KB.\n\n## Prerequisites\n\nIf you want to enable Notifications specifically, you\u0027ll need to create an [APNs SSL Certificate][3], then [upload it to Firebase][4] and finally register the app for remote notifications.\n\n## Add Firebase to your app\n\n1. Create a Firebase project in the [Firebase console][1], if you don\u0027t already have one. If you already have an existing Google project associated with your mobile app, click **Import Google Project**. Otherwise, click **Create New Project**.\n2. Click **Add Firebase to your iOS app** and follow the setup steps. If you\u0027re importing an existing Google project, this may happen automatically and you can just [download the config file][2].\n3. When prompted, enter your app\u0027s bundle ID. It\u0027s important to enter the bundle ID your app is using; this can only be set when you add an app to your Firebase project.\n4. At the end, you\u0027ll download a `GoogleService-Info.plist` file. You can [download this file][2] again at any time.\n\n## Configure Cloud Messaging in your app\n\nOnce you have your `GoogleService-Info.plist` file downloaded in your computer, do the following steps in Xamarin Studio:\n\n1. Add `GoogleService-Info.plist` file to your app project.\n2. Set `GoogleService-Info.plist` **build action** behaviour to `Bundle Resource` by Right clicking/Build Action.\n3. Open `GoogleService-Info.plist` file and change `IS_GCM_ENABLED` value to `Yes`. \n4. Add the following line of code somewhere in your app, typically in your AppDelegate\u0027s `FinishedLaunching` method (don\u0027t forget to import `Firebase.Analytics` namespace):\n\n```csharp\nApp.Configure ();\n```\n\n## Register for remote notifications\n\nEither at startup, or at the desired point in your application flow, register your app for remote notifications. Call `RegisterForRemoteNotifications` method as shown:\n\n```csharp\n// Register your app for remote notifications.\nif (UIDevice.CurrentDevice.CheckSystemVersion (10, 0)) {\n\t// iOS 10 or later\n\tvar authOptions = UNAuthorizationOptions.Alert | UNAuthorizationOptions.Badge | UNAuthorizationOptions.Sound;\n\tUNUserNotificationCenter.Current.RequestAuthorization (authOptions, (granted, error) =\u003e {\n\t\tConsole.WriteLine (granted);\n\t});\n\n\t// For iOS 10 display notification (sent via APNS)\n\tUNUserNotificationCenter.Current.Delegate = this;\n\n\t// For iOS 10 data message (sent via FCM)\n\tMessaging.SharedInstance.RemoteMessageDelegate = this;\n} else {\n\t// iOS 9 or before\n\tvar allNotificationTypes = UIUserNotificationType.Alert | UIUserNotificationType.Badge | UIUserNotificationType.Sound;\n\tvar settings = UIUserNotificationSettings.GetSettingsForTypes (allNotificationTypes, null);\n\tUIApplication.SharedApplication.RegisterUserNotificationSettings (settings);\n}\n\nUIApplication.SharedApplication.RegisterForRemoteNotifications ();\n```\n\nFor devices running iOS 10 and above, you must assign your delegate object to the `UNUserNotificationCenter` object to receive display notifications, and the `Messaging` object to receive data messages, before your app finishes launching. \n\nAt this point you have all set to start using Firebase Cloud Messaging component.\n\n## Method swizzling in Firebase Cloud Messaging\n\nOne important thing you should know before start using FCM is that FCM API performs method swizzling in two key areas: mapping your APNs token to the FCM registration token and capturing analytics data during downstream message callback handling. Developers who prefer not to use swizzling can disable it by adding the flag `FirebaseAppDelegateProxyEnabled` in the app’s Info.plist file and setting it to `No` (boolean value). If you decided to disable swizzling, the docs provide example for both scenarios, with and without method swizzling enabled.\n\n## Receive messages\n\nFirebase notifications behave differently depending on the foreground/background state of the receiving app.\n\n### Receive messages through FCM\n\nTo receive or send messages through FCM (not just the APNs interface), you\u0027ll need to connect to the FCM service. Connect when your application becomes active and whenever a new registration token is available. Once your app is connected, FCM ignores subsequent attempts to connect (don\u0027t forget to import `Firebase.CloudMessaging` namespace):\n\n```csharp\nMessaging.SharedInstance.Connect (error =\u003e {\n\tif (error != null) {\n\t\t// Handle if something went wrong while connecting\n\t} else {\n\t\t// Let the user know that connection was successful\n\t}\n});\n```\n\nWhen your app goes into the background, disconnect from FCM:\n\n```csharp\npublic override void DidEnterBackground (UIApplication application)\n{\n\t// Use this method to release shared resources, save user data, invalidate timers and store the application state.\n\t// If your application supports background exection this method is called instead of WillTerminate when the user quits.\n\tMessaging.SharedInstance.Disconnect ();\n\tConsole.WriteLine (\"Disconnected from FCM\");\n}\n```\n\n### Handling messages\n\nFor devices running iOS 9 and below, override AppDelegate\u0027s `DidReceiveRemoteNotification` method **to handle notifications received when the client app is in the foreground**, and all data messages that are sent to the client. The message is a dictionary of keys and values:\n\n```csharp\n// To receive notifications in foregroung on iOS 9 and below.\n// To receive notifications in background in any iOS version\npublic override void DidReceiveRemoteNotification (UIApplication application, NSDictionary userInfo, Action\u003cUIBackgroundFetchResult\u003e completionHandler)\n{\n\t// If you are receiving a notification message while your app is in the background,\n\t// this callback will not be fired \u0027till the user taps on the notification launching the application.\n\t\n\t// Do your magic to handle the notification data\n\tSystem.Console.WriteLine (userInfo);\n}\n```\n\nFor devices running iOS 10 and above, implement `IUNUserNotificationCenterDelegate` interface and override `WillPresentNotification` method **to handle notifications received when the client app is in the foreground**. The message is a `UNNotification` object. Implement `IMessagingDelegate` interface and override `ApplicationReceivedRemoteMessage` to handle all data messages that are sent to the client. The message is a `RemoteMessage` object:\n\n```csharp\n// To receive notifications in foreground on iOS 10 devices.\n[Export (\"userNotificationCenter:willPresentNotification:withCompletionHandler:\")]\npublic void WillPresentNotification (UNUserNotificationCenter center, UNNotification notification, Action\u003cUNNotificationPresentationOptions\u003e completionHandler)\n{\n\t// Do your magic to handle the notification data\n\tSystem.Console.WriteLine (notification.Request.Content.UserInfo);\n}\n\n// Receive data message on iOS 10 devices.\npublic void ApplicationReceivedRemoteMessage (RemoteMessage remoteMessage)\n{\n\tConsole.WriteLine (remoteMessage.AppData);\n}\n```\n\n### Handling messages with method swizzling disabled\n\nIf you disable method swizzling, you\u0027ll need to call method `AppDidReceiveMessage`. This lets FCM track message delivery and analytics, which is performed automatically with method swizzling enabled.\n\n```csharp\npublic override void DidReceiveRemoteNotification (UIApplication application, NSDictionary userInfo, Action\u003cUIBackgroundFetchResult\u003e completionHandler)\n{\n\t// If you are receiving a notification message while your app is in the background,\n\t// this callback will not be fired \u0027till the user taps on the notification launching the application.\n\t\n\t// If you disable method swizzling, you\u0027ll need to call this method. \n\t// This lets FCM track message delivery and analytics, which is performed\n\t// automatically with method swizzling enabled.\n\tMessaging.SharedInstance.AppDidReceiveMessage (userInfo);\n\t\n\t// Do your magic to handle the notification data\n\tSystem.Console.WriteLine (userInfo);\n}\n```\n\n### Receive and handle messages with notification in the payload\n\nWhen your app is in the background, iOS directs messages with the notification key to the system tray. A user tap on a notification opens the app, and the content of the notification is passed to the `DidReceiveRemoteNotification` method if implemented in the AppDelegate.\n\nIf you want to open your app and perform a specific action, set click_action in the [notification payload][6]. Use the value that you would use for the category key in the APNs payload.\n\n### Known issue - iOS 10 does not call DidReceiveRemoteNotification\n\nThere\u0027s a problem with iOS 10 and handling your notifications when your app is in background state or closed. When your app is in background state or closed and you tap a notification related to your app, the expected behaviour is that your app is opened and `DidReceiveRemoteNotification` method is called to handle the notification data but it seems that `DidReceiveRemoteNotification` method is never called (this will be fixed on iOS 10.1). In the meanwhile time, you can workaround this by implementing `DidReceiveNotificationResponse` method from `IUNUserNotificationCenterDelegate` interface:\n\n```csharp\n[Export (\"userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:\")]\npublic void DidReceiveNotificationResponse (UNUserNotificationCenter center, UNNotificationResponse response, Action completionHandler)\n{\n\t// Do your magic to handle the notification data\n\tSystem.Console.WriteLine (userInfo);\n}\n```\n\n## Send a message to a single device\n\n### Access the registration token\n\nTo send a message to a specific device, you need to know that device\u0027s registration token.\n\nBy default, the FCM SDK generates a registration token for the client app instance on initial startup of your app. If you want to target single devices, or create device groups for FCM, you\u0027ll need to access this token.\n\nBecause the token could be rotated after initial startup, you are strongly recommended to retrieve the latest updated registration token unless you have a specific need to directly retrieve the current token.\n\nThe registration token may change when:\n\n* The app deletes Instance ID\n* The app is restored on a new device\n* The user uninstalls/reinstall the app\n* The user clears app data.\n\nTo retrieve the current token, you will need to call the following property. This property returns null if the token has not yet been generated:\n\n```csharp\nvar token = InstanceId.SharedInstance.Token;\n```\n\n### Monitor token generation\n\nTo get the token when it is refreshed, you will need to register to Token Refresh Notification:\n\n```csharp\n// Monitor token generation\nInstanceId.Notifications.ObserveTokenRefresh ((sender, e) =\u003e {\n\t// Note that this callback will be fired everytime a new token is generated, including the first\n\t// time. So if you need to retrieve the token as soon as it is available this is where that\n\t// should be done.\n\tvar refreshedToken = InstanceId.SharedInstance.Token;\n\t\n\t// Do your magic to refresh the token where is needed\n});\n```\n\n### Send a message\n\n1. Install and run the app on the target device. You\u0027ll need to accept the request for permission to receive remote notifications.\n2. Make sure the app is in the background on the device.\n3. Open the **Notifications** tab of the [Firebase console][1] and select **New Message**.\n4. Enter the message text.\n5. Select **Single Device** for the message target.\n6. In the field labeled **FCM Registration Token**, enter the registration token you obtained in a previous section of this guide.\n\nAfter you click **Send Message**, targeted client devices that have the app in the background receive the notification in the notification center.\n\n### Receive and handle a messages\n\nTo handle a message implement the method described in Handling messages and Handling messages with method swizzling disabled sections above.\n\n## Send messages to Topics\n\nFirebase Cloud Messaging (FCM) topic messaging allows you to send a message to multiple devices that have opted in to a particular topic. Based on the publish/subscribe model, topic messaging supports unlimited subscriptions for each app. You compose topic messages as needed, and Firebase handles message routing and delivering the message reliably to the right devices.\n\n### Subscribe the client app to a topic\n\nClient apps can subscribe to any existing topic, or they can create a new topic. When a client app subscribes to a new topic name (one that does not already exist for your Firebase project), a new topic of that name is created in FCM and any client can subsequently subscribe to it.\n\nTo subscribe to a topic, use the following line of code (don\u0027t forget to import `Firebase.CloudMessaging` namespace):\n\n```csharp\nMessaging.SharedInstance.Subscribe (\"my/topic\");\n```\n\nThis makes an asynchronous request to the FCM backend and subscribes the client to the given topic. If the subscription request fails initially, FCM retries until it can subscribe to the topic successfully. Each time the app starts, FCM makes sure that all requested topics have been subscribed. To unsubscribe to a topic:\n\n```csharp\nMessaging.SharedInstance.Unsubscribe (\"my/topic\");\n```\n\n### Receive and handle topic messages\n\nTo handle a topic message implement the method described in Handling messages and Handling messages with method swizzling disabled sections above.\n\n### Send a message\n\n1. Install and run the app on the target device. You\u0027ll need to accept the request for permission to receive remote notifications.\n2. Make sure the app is in the background on the device.\n3. Open the **Notifications** tab of the [Firebase console][1] and select **New Message**.\n4. Enter the message text.\n5. Select **Topic** for the message target.\n6. Choose the desired topic.\n\nAfter you click **Send Message**, targeted client devices that have the app in the background receive the notification in the notification center.\n\nIf you want to build your message and send it through you app, see the following [documentation][7].\n\n## Send messages to Device Groups\n\nWith device group messaging, app servers can send a single message to multiple instances of an app running on devices belonging to a group. Typically, \"group\" refers a set of different devices that belong to a single user. All devices in a group share a common notification key, which is the token that FCM uses to fan out messages to all devices in the group.\n\nDevice group messaging makes it possible for every app instance in a group to reflect the latest messaging state. In addition to sending messages downstream to a notification key, you can enable devices to send upstream messages to a device group. You can use device group messaging with either the XMPP or HTTP connection server. The limit on data payload is 2KB when sending to iOS devices, and 4KB for other platforms.\n\nThe maximum number of members allowed for a notification_key is 20.\n\nTo learn how to achieve a device group, see the following [documentation][8]. After you get the group key, use this method to send messages to your group:\n\n```csharp\nvar message = NSDictionary.FromObjectAndKey (new NSString (\"This is my message body\"), new NSString (\"message\"));\nMessaging.SharedInstance.SendMessage (message, groupKey, yourOwnMessageId, timeOfLive);\n```\n\n### Known issues\n\n* App doesn\u0027t compile when `Incremental builds` is enabled. (Bug [#43689][9])\n\n\u003csub\u003e_Portions of this page are modifications based on work created and [shared by Google](https://developers.google.com/readme/policies/) and used according to terms described in the [Creative Commons 3.0 Attribution License](http://creativecommons.org/licenses/by/3.0/). Click [here](https://firebase.google.com/docs/cloud-messaging/ios/client) to see original Firebase documentation._\u003c/sub\u003e\n\n[1]: https://firebase.google.com/console/\n[2]: http://support.google.com/firebase/answer/7015592\n[3]: https://firebase.google.com/docs/cloud-messaging/ios/certs\n[4]: https://firebase.google.com/docs/cloud-messaging/ios/client#upload_your_apns_certificate\n[5]: https://firebase.google.com/docs/cloud-messaging/ios/client#register_for_remote_notifications\n[6]: https://firebase.google.com/docs/cloud-messaging/http-server-ref#notification-payload-support\n[7]: https://firebase.google.com/docs/cloud-messaging/ios/topic-messaging#build_send_requests\n[8]: https://firebase.google.com/docs/cloud-messaging/ios/device-group\n[9]: https://bugzilla.xamarin.com/show_bug.cgi?id=43689","Hash":"9d069bcd46588987ed4ffac192522e76","TargetPlatforms":["ios","ios-unified"],"TrialHash":null}