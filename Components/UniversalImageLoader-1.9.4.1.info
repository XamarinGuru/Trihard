{"Name":"Universal Image Loader","Id":2189,"Alias":"UniversalImageLoader","Description":"\nThe Universal Image Loader aims to provide a powerful, flexible and \nhighly customizable instrument for image loading, caching and displaying.  \nIt provides a lot of configuration options and good control over the image \nloading and caching process.\n\n## Using\n\n\n\n### Simple\n\nWe can load an image into any `ImageView`:\n\n    // Get singleton instance\n    ImageLoader imageLoader = ImageLoader.Instance; \n    \n    // Load image\n    imageLoader.DisplayImage(imageUri, imageView);\n    \nWe can also load an image, without displaying it:\n    \n    // Load image and return it in callback\n    imageLoader.LoadImage(\n        imageUri, \n        new ImageLoadingListener(\n            loadingComplete: (imageUri, view, loadedImage) =\u003e {\n                // Do whatever you want with Bitmap\n            }));\n        \nIf we are already on another thread, we can load an image on that thread:\n\n    // Load image synchronously\n    Bitmap bmp = imageLoader.LoadImageSync(imageUri);\n\n### Complete\n\nWe can load an image and then decode it to `Bitmap`. This bitmap can be \ndisplayed in any `ImageView`, or any other view which implements the\n`IImageAware` interface:\n\n    imageLoader.DisplayImage(\n        imageUri,\n        imageView, \n        options, \n        new ImageLoadingListener(\n            loadingStarted: (imageUri, view) =\u003e {\n            },\n            loadingComplete: (imageUri, view, loadedImage) =\u003e {\n            },\n            loadingFailed: (imageUri, view, failReason) =\u003e {\n            },\n            loadingCancelled: (imageUri, view) =\u003e {\n            }),\n        new ImageLoadingProgressListener(\n            progressUpdate: (imageUri, view, current, total) =\u003e {\n            }));\n\nThe final size of the loaded image can be controlled:\n\n    ImageSize targetSize = new ImageSize(80, 50); \n    imageLoader.LoadImage(\n        imageUri, \n        targetSize,\n        options, \n        new ImageLoadingListener(\n            loadingComplete: delegate {\n                Bitmap loadedImage = e.LoadedImage;\n                // Do whatever you want with Bitmap (80x50)\n            }));\n\n### Acceptable URIs examples\n\n    \"http://site.com/image.png\" // from Web\n    \"file:///mnt/sdcard/image.png\" // from SD card\n    \"file:///mnt/sdcard/video.mp4\" // from SD card (video thumbnail)\n    \"content://media/external/images/media/13\" // from content provider\n    \"content://media/external/video/media/13\" // from content provider (video thumbnail)\n    \"assets://image.png\" // from assets\n    \"drawable://\" + R.drawable.img // from drawables (non-9patch images)\n\nNOTE: Use `drawable://` only if you really need it! Always consider the native way to load drawables:\n\n    ImageView.SetImageResource(...)\n\n## Features\n * Multithread image loading *(async or sync)*\n * Wide customization of ImageLoader\u0027s configuration \n   *(thread executors, downloader, decoder, memory and disk cache, \n   display image options, etc.)*\n * Many customization options for every display image call \n   *(stub images, caching switch, decoding options, Bitmap processing and \n   displaying, etc.)*\n * Image caching in memory and/or on disk *(device\u0027s file system or SD card)*\n * Listening loading process *(including downloading progress)*\n * Android 2.0+ support\n \nMore information can be found on the wiki: \nhttps://github.com/nostra13/Android-Universal-Image-Loader/wiki\n","Version":"1.9.4.1","Summary":"A powerful, flexible and highly customizable instrument for image loading, caching and displaying.","QuickStart":"\nThe Universal Image Loader aims to provide a powerful, flexible and \nhighly customizable instrument for image loading, caching and displaying.  \nIt provides a lot of configuration options and good control over the image \nloading and caching process.\n\n## Using\n\n### Configuration\n\nInclude following permission if you load images from Internet:\n\n    [assembly: UsesPermission(Android.Manifest.Permission.Internet)]\n    \nInclude following permission if you want to cache images on SD card:\n\n    [assembly: UsesPermission(Android.Manifest.Permission.WriteExternalStorage)]\n    \nCreate the configuration once in an `Application`, or an `Activity` before using the library:\n\n    [Application]\n    public class UILApplication : Application\n    {\n        protected UILApplication(IntPtr javaReference, JniHandleOwnership transfer)\n            : base(javaReference, transfer)\n        {\n        }\n        public override void OnCreate()\n        {\n            base.OnCreate();\n            // Use default options\n            var config = ImageLoaderConfiguration.CreateDefault(ApplicationContext);\n            // Initialize ImageLoader with configuration.\n            ImageLoader.Instance.Init(config);\n        }\n    }    \n\n### Simple\n\nWe can load an image into any `ImageView`:\n\n    // Get singleton instance\n    ImageLoader imageLoader = ImageLoader.Instance; \n    \n    // Load image\n    imageLoader.DisplayImage(imageUri, imageView);\n    \nWe can also load an image, without displaying it:\n    \n    // Load image and return it in callback\n    imageLoader.LoadImage(\n        imageUri, \n        new ImageLoadingListener(\n            loadingComplete: (imageUri, view, loadedImage) =\u003e {\n                // Do whatever you want with Bitmap\n            }));\n        \nIf we are already on another thread, we can load an image on that thread:\n\n    // Load image synchronously\n    Bitmap bmp = imageLoader.LoadImageSync(imageUri);\n\n### Complete\n\nWe can load an image and then decode it to `Bitmap`. This bitmap can be \ndisplayed in any `ImageView`, or any other view which implements the\n`IImageAware` interface:\n\n    imageLoader.DisplayImage(\n        imageUri,\n        imageView, \n        options, \n        new ImageLoadingListener(\n            loadingStarted: (imageUri, view) =\u003e {\n            },\n            loadingComplete: (imageUri, view, loadedImage) =\u003e {\n            },\n            loadingFailed: (imageUri, view, failReason) =\u003e {\n            },\n            loadingCancelled: (imageUri, view) =\u003e {\n            }),\n        new ImageLoadingProgressListener(\n            progressUpdate: (imageUri, view, current, total) =\u003e {\n            }));\n\nThe final size of the loaded image can be controlled:\n\n    ImageSize targetSize = new ImageSize(80, 50); \n    imageLoader.LoadImage(\n        imageUri, \n        targetSize,\n        options, \n        new ImageLoadingListener(\n            loadingComplete: delegate {\n                Bitmap loadedImage = e.LoadedImage;\n                // Do whatever you want with Bitmap (80x50)\n            }));\n\n### Acceptable URIs examples\n\n    \"http://site.com/image.png\" // from Web\n    \"file:///mnt/sdcard/image.png\" // from SD card\n    \"file:///mnt/sdcard/video.mp4\" // from SD card (video thumbnail)\n    \"content://media/external/images/media/13\" // from content provider\n    \"content://media/external/video/media/13\" // from content provider (video thumbnail)\n    \"assets://image.png\" // from assets\n    \"drawable://\" + R.drawable.img // from drawables (non-9patch images)\n\nNOTE: Use `drawable://` only if you really need it! Always consider the native way to load drawables:\n\n    ImageView.SetImageResource(...)\n\n## Features\n * Multithread image loading *(async or sync)*\n * Wide customization of ImageLoader\u0027s configuration \n   *(thread executors, downloader, decoder, memory and disk cache, \n   display image options, etc.)*\n * Many customization options for every display image call \n   *(stub images, caching switch, decoding options, Bitmap processing and \n   displaying, etc.)*\n * Image caching in memory and/or on disk *(device\u0027s file system or SD card)*\n * Listening loading process *(including downloading progress)*\n * Android 2.0+ support\n \nMore information can be found on the wiki: \nhttps://github.com/nostra13/Android-Universal-Image-Loader/wiki\n","Hash":"cd026c6bfe4df65b08d0659e5221481f","TargetPlatforms":["android"],"TrialHash":null}