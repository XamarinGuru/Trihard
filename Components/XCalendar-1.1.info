{"Name":"XCalendar","Id":1662,"Alias":"XCalendar","Description":"\nAbout XCalendar\n===============\n\nXCalendar has a _modern, minimalistic look-and-feel_ coupled with an intuitive API to enable you to quickly start working with it.\n\nXCalendar wraps a native third-party library in a Xamarin binding library that targets the new **Unified API**.\n\nModular Structure\n=================\n\nViews for XCalendar are _loosely coupled_. You have the freedom to add only the views you require. For instance, you can leave out the event viewer and only show the calendar content view.\n\nXCalendar can be added entirely _programmatically_ or using the _Interface Builder_ with custom classes.\n\nXCalendar also supports a **full-month mode** that displays the entire month’s days in the content grid, and a **week mode** that displays only a week’s days. You can set this at design time or provide the ability to the user to dynamically switch between modes.\n\nEvent Viewer\n============\n\nXCalendar provides an event-viewer identical to the one in iOS’s built-in calendar app. You simply need to pass a **list of events** with their title, start-date, and end-date.\n\nMultiple Calendars\n==================\n\nYou can add a single calendar or multiple ones inside a view controller and manage them painlessly. Event handler methods provide a **parameter** for the XCalendar that raised the event.\n\nC# Style Events\n===============\n\nYou can add and remove event handlers using the familiar C# style. XCalendar provides the following events:\n\n- _DateSelected_ - Occurs when a date is selected\n- _PreviousPageLoaded_ - Occurs when you swipe to the previous month/week\n- _NextPageLoaded_ - Occurs when you swipe to the next month/week\n\nAppearance\n==========\n\nXCalendar provides rich APIs you can leverage to fully _**customize** its appearance to match your app’s theme_.\n\nYou can change the look and feel of many visual elements based on their state including:\n- background colors\n- selection circle size\n- highlight colors\n- text colors\n\nYou can also customize the _title text_ that typically depicts the month name and year for the month being viewed.\n\nFor instance, you can pass a formatted string to show full text such as “January 2014” or short text such as “01/2014” instead of the default “Jan 2014”.\n\n***\n\nXCalendar wraps Jonathan Tribouharet’s _JTCalendar_ in a Xamarin binding library. It also introduces a feature unavailable in the original _JTCalendar_ — **an event viewer**.","Version":"1.1","Summary":"XCalendar is a sleek, elegant, lightweight and modular calendar control for Xamarin.iOS.","QuickStart":"You can add an `XCalendar` as shown in the following example.\n\nYou can also add views via the _Interface Builder_ and wire them up with custom classes.\n\nThe former method affords greater control and ease. The lack of seamless toolbox integration of third-party controls in the Interface Builder makes the latter method less desirable.\n\nExample\n=======\n\nThe following code inserts a calendar.\n```\nusing Softweb.Xamarin.Controls.iOS;\npublic class XCalendarVC : UIViewController\n{\n    Calendar calendar;\n\n    public override void ViewDidLoad()\n    {\n\t    base.ViewDidLoad();\n\n        //Create required objects\n        var calendar = new Calendar ();\n        var menuView = new CalendarMenuView\n            { Frame = new CGRect (0f, 0f, 320f, 40f) };\n        var contentView = new CalendarContentView \n            { Frame = new CGRect (0f, 45f, 320f, 280f) };\n    \n        //Customize calendar\u0027s appearance\n        var appearance = calendar.CalendarAppearance;\n        appearance.GetNSCalendar().FirstWeekDay = (nuint)3;\n        appearance.DayCircleColorSelected = UIColor.LightGray;\n        appearance.DayCircleRatio = (9f / 10f);\n        appearance.WeekDayFormat = CalendarWeekDayFormat.Single;\n    \n        //Link the views to the calendar\n        calendar.MenuMonthsView = menuView;\n        calendar.ContentView = contentView;\n        \n\t    calendar.DateSelected += DateSelected;\n\t    calendar.NextPageLoaded += DidLoadNextPage;\n\t    calendar.PreviousPageLoaded += DidLoadPreviousPage;\n\t\n        // Pass a function that returns text to display in month label\n        //E.g. \"JAN 2014\" OR “01/2014\"\n        appearance.SetMonthLabelTextCallback (\n            //Full month-name and year. E.g. DECEMBER 2014\n            (NSDate date, Calendar cal) =\u003e new NSString (\n                ((DateTime)date).ToString (\"MMMM yyyy\")));\n    \n        //Add the views to the current view\n        View.Add(menuView);\n        View.Add(contentView);\n    }\n\n    public override void ViewWillAppear(bool animated)\n    {\n\t    base.ViewWillAppear(animated);\n\n\t    //Reload calendar\n\t    calendar.ReloadData();\n    }\n\n    public void DateSelected(object sender, DateSelectedEventArgs args)\n    {\n    \tConsole.WriteLine(String.Format(\"Selected date is {0}\", ((DateTime) args.Date).ToLocalTime().ToString(\"dd-MMM-yyyy\")));\n    }\n\n    public void DidLoadPreviousPage(object sender, EventArgs args)\n    {\n    \tConsole.WriteLine(\"Loaded previous page\");\n    }\n\n    public void DidLoadNextPage(object sender, EventArgs args)\n    {\n    \tConsole.WriteLine(\"Loaded next page\");\n    }\n...\n}\n```\n### Adding an Event Viewer\nThe following code adds an event viewer to your calendar.\n```\n//Create an EventView instance\nvar eventView = new CalendarEventView\n    { Frame = new CGRect (0f, 370f, 320f, 180f) };\n\n//Assign it to the EventView property of Calendar\ncalendar.EventView = eventView;\n\n//Add EventView to your main View\nView.Add (eventView);\n\n//Remember to specify the DateTimeKind for event date\nvar fSharpMeetDate =\n    new DateTime (2014, 12, 26, 19, 30, 00, DateTimeKind.Local);\n\n//Add events\ncalendar.EventSchedule = new EventDetails[] {\n    new EventDetails (\n\t    startDate: (NSDate) DateTime.Now,\n\t    endDate: NSDate.Now.AddSeconds(3000),\n\t    title: \"Writing documentation\"),\n    new EventDetails (\n    \t(NSDate) fSharpMeetDate,\n\t    (NSDate) fSharpMeetDate.AddHours(2),\n\t    \"F# Group Meeting\")\n};\n\n```\n\nAdding Views Using Interface Builder\n====================================\n\nIf you want to add layout constraints using the Interface Builder, follow the steps below:\n\n1) Create (empty) subclasses of `CalendarMenuView`, `CalendarContentView`, and `CalendarEventView`.\n\n2) Wire up the `UIView`s you created for `XCalendar` in your layout (storyboard/XIB) with the appropriate classes created in _step 1_ by setting the `Custom Class` property to the class name.\n\n3) In your code, assign the views to the appropriate properties of your `XCalendar` object as shown in the example above.\n","Hash":"191d9b4a14abe8f2f363933f0e806636","TargetPlatforms":["ios","ios-unified"],"TrialHash":null}