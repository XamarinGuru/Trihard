{"Name":"Google Play Services - Maps","Id":2943,"Alias":"googleplayservices-maps","Description":"Google Play Services - Maps\n===========================\n\nWith the Google Maps Android API, you can add maps based on Google Maps data to your application. The API automatically handles access to Google Maps servers, data downloading, map display, and response to map gestures. You can also use API calls to add markers, polygons, and overlays to a basic map, and to change the user\u0027s view of a particular map area. These objects provide additional information for map locations, and allow user interaction with the map.\n\n\n\n\n\nGoogle Play Services\n====================\n\nGive your apps more features to attract users on a wider range of devices. With Google Play services, your app can take advantage of the latest, Google-powered features such as Maps, Google+, and more, with automatic platform updates distributed as an APK through the Google Play store. This makes it faster for your users to receive updates and easier for you to integrate the newest that Google has to offer.\n\n\nDevelop\n-------\n\nShip higher quality apps. Faster.\nGet a headstart on your development with Google services that you can use out-of-the-box.\n - Analytics\n - Sign in with Google\n - Maps\n - Places\n - Engage\n\n\n\nGrow an active user base\n------------------------\n\nReach new users and find ways to keep them coming back to your app.\n - Google Cloud Messaging\n - App Indexing\n - App Install Ads\n - App Invites\n - Earn\n\n\n\nTap into a range of tools to make more money\n--------------------------------------------\n\nTake a user-by-user approach to monetization that maximizes your app revenue.\n - AdMob\n - In-App Billing and Subscriptions\n - Android Pay\n \n\n\nMore ways to enhance your app\n-----------------------------\n\n### Use location to power context\n\nRespond to where users are and what they\u0027re doing. Enrich your app with high-accuracy location reporting, geofencing, and activity recognition.\n\n### Stream content to TVs and speakers\nLet users send audio and visual content to any Cast-enabled TV or speaker and control it from their phones or tablets.\n\n### Add social features to your games\nEnhance your games and learn more about your players. Add achievements, leaderboards, saved games, real-time multiplayer, and more.\n\n### Enhance your app for fitness\nParticipate in the fitness ecosystem and add high-engagement features to your app. Analyze raw sensor data or take advantage of shared fitness data.\n\n### Store and manage files in the cloud\nLet users interact with nearly any aspect of their Google Drive content, including sharing permissions, file revisions, and connected apps.\n\n### Support voice actions\nLet users engage with your app quickly and conveniently through voice commands. Respond to system actions or add custom actions of your own.\n\n","Version":"29.0.0.2","Summary":"Add custom markers, styled maps, 3D buildings, indoor floor plans, street view, satellite imagery, and more to your Android app.","QuickStart":"With the Google Maps Android API, you can add maps based on Google Maps data to your application. The API automatically handles access to Google Maps servers, data downloading, map display, and response to map gestures. You can also use API calls to add markers, polygons, and overlays to a basic map, and to change the user\u0027s view of a particular map area. These objects provide additional information for map locations, and allow user interaction with the map.\n\n\n\nRequired Android API Levels\n===========================\n\nWe recommend setting your app\u0027s *Target Framework* and *Target Android version* to **Android 5.0 (API Level 21)** or higher in your app project settings.\n\nThis Google Play Service SDK\u0027s requires a *Target Framework* of at least Android 4.1 (API Level 16) to compile.\n\nYou may still set a lower *Minimum Android version* (as low as Android 2.3 - API Level 9) so your app will run on older versions of Android, however you must ensure you do not use any API\u0027s at runtime that are not available on the version of Android your app is running on.\n\n\n\n\nGoogle Developers Console Setup\n=================================\n\nMany of the Google Play Services SDK\u0027s require that you create an application inside the [Google Developers Console][1].  Visit the [Google Developers Console][1] to create a project for your application.\n\nOnce you have created a project for your Android app, enable the necessary APIs in the developer console for the Google Play Services APIs you will be using in your app.\n\n\n\nThe *Google Maps Android API v2* API must be enabled in the Developers Console to use the Maps APIs in your app.\n\nIf you are using the Places APIs, the *Google Places API for Android* API must also be enabled in the Developers Console.\n\n\n\nCredentials\n-----------\n\nSome Google Play Services APIs require an *API Key* or an *OAuth 2.0 Client ID* (or both) to be setup to allow your app to make authenticated calls against the API.\n\nIn the Developers Console, in your app\u0027s Project, under the *APIs \u0026 auth* section, go to *Credentials*.\n\n\n\n\n\n### API Key\n\nIf the Google Play Services API you are using requires an API Key:\n\n  1. *Add credentials* button and then *API key*\n  2. Choose *Android key*\n  3. Click *Add package name and fingerprint*\n  4. Enter your android app\u0027s package name as found in your *AndroidManifest.xml* file\n  5. [Find your SHA-1 fingerprints][2]\n  6. Enter your SHA-1 fingerprint of your app\u0027s debug keystore\n  7. Repeat steps 4-6 with the package name and SHA-1 of the keystore file you will be signing your app\u0027s Release builds with\n  8. Click *Create*\n  9. Note the *API key* value you generated\n\nOnce you have your API key value, you will need to add this to your *AndroidManifest.xml* as a metadata value either by directly editing the manifest file, or using an assembly level attribute which will generate the value in the manifest file for you.  The metadata key will be different for each Google Play Services API.  For example, if you are adding it for Maps, you could add this assembly level attribute to your project:\n\n```csharp\n[assembly: MetaData (\"com.google.android.maps.v2.API_KEY\", Value=\"YOUR-API-KEY\")]\n```\n\n\nOnce you have created your API key, you must add it as a metadata value in your *AndroidManifest.xml* file.  You can add it by including the following assembly level attribute in your app:\n\n```csharp\n[assembly: MetaData (\"com.google.android.maps.v2.API_KEY\", Value=\"YOUR-API-KEY\")]\n```\n\n\n\nAndroid Manifest \n================\n\nSome Google Play Services APIs require specific metadata, attributes, permissions or features to be declared in your *AndroidManifest.xml* file.\n\nThese can be added manually to the *AndroidManifest.xml* file, or merged in through the use of assembly level attributes.\n\n\nThe SDK requires the *Internet*, *AccessNetworkState*, *AccessCourseLocation*, *AccessFineLocation*, *WriteExternalStorage* and *AccessMockLocation* permissions to work correctly.  You can have these automatically added to your *AndroidManifest.xml* file by including the following assembly level attributes:\n\n```csharp\n[assembly: UsesPermission (Android.Manifest.Permission.Internet)]\n[assembly: UsesPermission (Android.Manifest.Permission.AccessNetworkState)]\n[assembly: UsesPermission (Android.Manifest.Permission.AccessCourseLocation)]\n[assembly: UsesPermission (Android.Manifest.Permission.AccessFineLocation)]\n[assembly: UsesPermission (Android.Manifest.Permission.AccessMockLocation)]\n[assembly: UsesPermission (Android.Manifest.Permission.WriteExternalStorage)]\n```\n\n\n\nSamples\n=======\n\nYou can find a Sample Application within each Google Play Services component.  The sample will demonstrate the necessary configuration and some basic API usages.\n\n\n\n\n\nAttribution Requirements\n========================\n\nIf you use the Google Maps Android API in your application, you must include the Google Play Services attribution text as part of a \"Legal Notices\" section in your application. Including legal notices as an independent menu item, or as part of an \"About\" menu item, is recommended.\n\nThe attribution text is available by making a call to `GoogleApiAvailability.OpenSourceSoftwareLicenseInfo`\n\n\n\n\nLearn More\n==========\n\nYou can learn more about the various Google Play Services SDKs \u0026 APIs by visiting the official [Google APIs for Android][3] documentation\n\n\nYou can learn more about Google Play Services Maps by visiting the official [Google Maps for Android API](https://developers.google.com/maps/documentation/android-api/) documentation.\n\n\n\n[1]: https://console.developers.google.com/ \"Google Developers Console\"\n[2]: https://developer.xamarin.com/guides/android/deployment,_testing,_and_metrics/MD5_SHA1/ \"Finding your SHA-1 Fingerprints\"\n[3]: https://developers.google.com/android/ \"Google APIs for Android\"\n\n","Hash":"efd94891e1136aaf37f553ebdcc46dab","TargetPlatforms":["android"],"TrialHash":null}